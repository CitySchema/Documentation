
<!doctype html>
<html lang="en">
<!-- Hi Folks, this is the template file for pages in the citySchema.org documentation library -->
<head>
    <title>Model Collection Management</title>
    <meta name="description" content="Covers the procedures formanaging a collection of 3D building models as part od a GIS-based city modeling project.  Par of the citySchema.org framework foo developing, sharing and preserving city model assets. ">
    <meta name="keywords" content="City Modeling, Digital Humanities, Geography, citySchema">
    <meta name="author" content="Paul B. Cote">
    
<!-- don't edit between here and the Article div.  -->
    <link rel="icon" href="../resources/images/favicon.png" type="image/x-icon">
    <script src="../resources/jquery/jquery-3.6.0.min.js"></script>
    <link href="../resources/cityschema.css" rel="stylesheet"> 
    <script src="../resources/slideshow_pbc.js"></script>
    <link href="../resources/slideshow_pbc.css" rel="stylesheet"> 

    <!-- The index sidebar and all content other than the main article coe form the cityschema_includes.js.
          When you add a new page or internalachcor, you should update the index in cityschema_includes.js.-->
    <script src="../resources/cityschema_includes.js"></script>
    <!-- THis has to come after the cityschema_includes file-->
    <script src="../resources/cityschema.js"></script>
</head>
<body>
    <div id="grid-container">
      <div id="index-container">
         <div id="index-header"> <!-- Content provided by cityschema_includes.js--> </div>
         <div id="index">        <!-- Content provided by cityschema_includes.js--> </div>
         <div id="index-footer"> <!-- Content provided by cityschema_includes.js--> </div>
      </div> 
      <div id="main-container">
        <div id="header"> <!-- Content provided by cityschema_includes.js--> </div>

<!-- Page content goes inside the article div -->
<div id="article">
  <h3 class="section_title"></h3>  <!-- Optional: would be the tile of the intro chapter. -->
    <h1 class="title">Managing the Building Model Collection using ArcGIS Pro</h1>
  

    <p>This page provides an overview of the procedures and tools for managing the collection of 3D models of buildings, bridges, walls and docks as part of a city model within the <a href="../home.index.htm">citySchema.org framework for developing, sharing and preserving city model assets</a>.
    </p><p> 
    The workflow and tools described on this page can be demonstrated and forked for local customizations using the <a href="http://github.com/CitySchema/ModelMgt" target="github">Model Management GitHub repository</a>.  We start with the ArcGIS Pro workflow because our municipal GIS managers tend to have licenses for this tool-kit.  The ArcGIS model for representing 3D geometry as geographic features is well suited to the task. We anticipate that the concepts and procedures described here may be implemented on other platforms with completely interoperable results. 
    </p> 
    <h3>Table of Contents</h3>
    <ol>
      <li><a href="#roles">Enterprise and Technical Viewpoints</a>
      <li><a href="#foundation">Foundation Concepts and Data Dictionary</a>
      <li><a href="#context">Filesystem Context </a>
      <li><a href="#tour">Tour of the Model Management Workspace Folder: Data Management</a>
      <li><a href="#lifecycle">Lifecycle of a Model Management Workspace</a>
      <li><a href="#project">Tour of the ArcGIS Pro Project: Properties, Layers and Views</a>
      <li><a href="#initialize">Initializing the Workspace</a>
      <li><a href="#import">Import, Inspect and Enroll Models</a>
      <li><a href="#normals">Surface Normals: Why models may not be reflecting light correctly.</a>
      <li><a href="#stage">Promote and Demote Models</a>
      <li><a href="#edit">Model Editing Workflows</a>
      <li><a href="#nextedition">Publishing the Next Edition Model Collection</a>
      </ol>
<HR>
    <h2 id="roles">Enterprise and Technical Viewpoints</h2>
    <p>Before digging into the technical details of <b>How</b> to manage a city-wide collection of 3D models, it will be useful to have a picture of the sorts of people for whom this scheme has been designed, and the personal and institutional <b>motivations</b> that make this effort worthwhile.  
</p><p>
    The <b>Technical User</b> is the sort of person who carries out edits and other data management tasks regarding geographic data in a municipality.  This is a person who knows how to use 3D modeling tools and has experience with the issues that come up when working with 3D models in various formats.  The technical user also has an understanding of GIS, relational database fundamentals and basic programming with ArcGIS model builder.  Basic programming with python and javascript is useful, as well.
  </p><p>
    
    The <b>IT Manager</b> is accountable for taking care of the institution's information.  This role involves hiring and evaluating the work of technical users who may be employees or contractors.   For the IT manager, a successful architecture results in a collection of assets that is sustainable without dependencies on particular individuals holding the position of technician or manager. For the IT manager, it will be useful to understand the essential pieces of the city model, where they are stored, and the sorts of problems that are likely to occur -- including the possibility that the digital assets associated with the city model may need to be migrated from one software platform to another.
  </p>
  <h3>Special Problems of Managing 3D Models in GIS</h3>
  <p>
    <b>Managing a collection of 3D models is different from managing traditional two-dimensional GIS data.</b> Points, Lines and Polygons are easy to visually inspect and to repair with a few strokes of the cursor.  Rules of 2D topology can be evaluated automatically.  Problems that occur with GIS-based 3D model collections may be more difficult to discover.  There are many data-sets involved, including historical models, alternative models, superseded proposals, retired models, etc, which are rarely looked at.  3D models are tricky to repair and replace -- particularly if the original source files are no longer available.  When a 3D model is corrupt, the effect is sometimes invisible in one context, such as the desktop GIS application, but becomes evident when the model is translated to another format.  it is often the case that problems such as lost or corrupted models are not discovered for weeks, and when they are, it can be difficult to trace the problem or to know how many other models may have been affected.  
  </p><p>
    The special problems of managing temporally and geographically extended collections of 3d models are the reason for the special pains taken in designing the model management workflow to safeguard against accidental data loss, to maintain an audit trail for all changes,  to assure a roll-back capability, and to keep track of source data.  
    </p><p>
    Managers and technicians should each read this documentation to understand that there is a place for storing and finding every piece of the city model.  This will relieve the technician from having to make thousands of new decisions, save the cost of learning from unsuccessful ones.  This understanding, along with periodic quality checks will assure the IT manager that the information resources are recoverable even after the technician moves on to other jobs. 
    </p>
  

<HR>

    <h2 id="foundation">Foundation Concepts</h2>

    <p>For model curators, it is essential to understand the conceptual overview of the model collection, including definitions of important terms and a data dictionary issued in the document: <a href="../model_collection/index.htm" target="outboard">Overview of Building Model Collection and Catalog</a>.  It is particularly important to understand the <a href="../model_collection/index.htm#datadictionary" target="datadict">Data Dictionary</a> with all of the meanings and values expected for each of the model attributes.</p> 
    </p><p>
    The Building model collection is the most intensively managed component of the city-wide 3D model. This workflow prepares the model collection to become one of the components of the <a href="../repocat/index.htm" target = "outboard">citySchema Repository Catalog</a> publishing and archiving strategy.
    </p>    

<h2 id="context">File System Context</h2>
<p>The citySchema architecture makes use of a modular file-system that has evolved over time to provide a scheme for storing assets that does not grow more complicated as the number of assets or their spatial or temporal extent grows.  The file system facilitates sharing and syncing of assets between in-house and off-site installations where parts of the city model may be worked on.   The demonstration version of the ModelMgt workspace is self-contained so it canbe explored without setting up an elaborate context of source folders.  To see how this workflow would be set up in a production environment, visit <a href="../filesystem/index.htm" target="outboard"> citySchema Modular File System</a> to learn more about the recommended filesystem context for the ModelMgt workspace.


<h3 id="tour">Tour of the Model Management Workspace</h3>
<p>A tour of the ModelMgt workflow folder is useful for orientation to the file organization.  It also introduces the main components of the workflow.  You can watch the tour on youtube (soon) or follow along with your local copy of the workspace <a href="http://github.com/CitySchema/ModelMgt" target="github">available on github</a>.  
</p>

  <div class="feature tour">
  <h3>Filesystem and Folders</h3>
    <figure class="right">
      <img src="images/model_mgt_files.jpg">
      <figcaption>Model Management Workspace</figcaption>
    </figure>
 
  <ul>
    <li><b>ArcDocs folder: </b> contains ArcGIS Pro projects where the processing takes place.  Layer files are also stored here, to save styling of layers and group layers for re-use within the maps and scenes within the project.  Also contains the ArcGIS Task files that hold the step-by-step interactive guide for managing your model collection.  

    <li><b>ModelWork folder: </b> contains the source files for new models that have been submitted for inclusion into the collection.  New models that are the result of edits to previously existing models are also stored in the ModelWork folder.  Models are organized in batch folders named according to the source and date.  This organization allows for the locations of source models to be referenced in the model catalog and easily retrieved in case anyone wants re-visit and modify a model using the original sources.  When a ModelMgt workflow folder is retired, the model batch folders are copied to the <b>Cty3D_Archive</b> folder.
    <li><b>PriorArchive folder:</b> contains the latest archived edition of the Cty3D_Models_YYYYMMDD.gdb.  The date string in the name of the geodatabase reflects the date that the collection was issued from a previously retired ModelMgt workflow. 
    </p><p>The capability to recover from corruption and errors requires that the lineage of PriorArchive models be continuous from one ModelMgt workflow to the next.  This means that edits to the collection that are made outside of a modelMgt workflow may be unrecoverable later.
    </p>
    <!--p>
      It is often the case that the next edition of the model collection calls for changes to the table schema for 3D models.  It would take a while to explain why, but for the purposes of maintaining the audit and rollback capability, it is necessary to apply whatever schema changes you intend to make to the prior archived model collection, before you begin making changes.  Therefore, the PriorArchive folder may contain a geodatabase named Cty3D_Models_YYYYMMDD_Migrated.gdb.  
    </p -->
    </p><p>The PriorArchive folder contains geodatabases and ArcGIS layer (.lyrx) files that are used to view and inspect the model collection.  
    <li><b>NextEdition folder:</b> is the destination for the new editions of City3D_Model geodatabases.  A single ModelMgt workflow folder may spawn several new editions, each one carrying a new date string in its name.  Each new edition also comes with its lyrx files.
    <li><b>Stage folder:</b> contains two geodatabases: <b>Stage.gdb</b> which contains copies of all of the prior_archived feature classes which are used for making updates to the Model Status attributes andserve as the source for edits.  There is also a Stage_NewModels_MP feature class that contains all of the new models that have been imported or new models that are the results of edits to models frm the Prior_Archived collection.  Models from the Stage geodatatabase are used to generate the next edition of the model collection.  Each of the feature classes in the Stage.gdb have <b>Stage_</b> pre-ended to their name.  
    </p><p>
    The <b>Stage\Config.gdb</b> contains the template multipatch feature class reflecting the latest schema for 3D model feature classes. Tables representing domain values are also stored in config.gdb. 
    <li><b>Sources folder:</b> the sources folder contains parcel information, the latest development log and a terrain raster that covers the extent of the city model.  These datasets are used tp attach attributes to new building models. 
    </p><p>
      In your production environment, these source datasets may be referenced from other places -- most likely fro within the <b>Bos3d_Master</b> folder  
    <li><b>Tools folder:</b> ArcGIS tool boxes, FME workbench folders, Python scripts, projection files, and lyrx files used in workflows that will be discussed below. 
    </p>
    <li><b>Scratch folder:</b> is the destination for all intermediate datasets generated by tools.  The <b>Scratch\Scratch.gdb</b> is the default workspace for the ArcGIS Pro project -- the destination for all tool outputs that are not otherwise specified. 
    <li><b>Tools folder:</b> is the location for the default ArcGIS toolbox, <b>ModelMgt.tbx</b> and other resources used by tools including Python scripts, FME workbench files, and projection files.
    </ul>  
  </div>

<hr>

<h1 id="lifecycle">Lifecycle of a Model Management Workspace</h1>
<p>The citySchema system uses workspace folders to organize tools and data into self-contained packages that may be re-used, modified and archived.  While in use these workspaces provide an environment for re-purposing and customizing tools.  After a period of use, a workspace can be zipped and retired to become a frozen archive that preserves all of the decisions and procedures that have been applied. </p>   
<p>A model management workspace is intended to produce new editions of the model collection that represent updates to the Prior Archived model collection.  In the lifespan of a model management workspace several new editions can be made based on the same Prior Archived collection.  The changes carried out on the Stage feature classes are cumulative. 
Stages in the lifecycle of a model management workspace are depicted in the slideshow, below. 

    <!-- Slideshow container -->
    <div id="moreslides" class="slideshow in-page" 
    data-imgheight = "350px" 
    data-title = "" 
    data-playpaused = "playing" >
    <div class="slidecontainer" data-title="Initialize Prior Archived Collection" data-caption="Away up to tree-line.">
    <div class="slide"><img src="./images/lifecycle_init.jpg" ></div>
    <div class="caption"><p>The workspace folder is initialized by copying the latest archived model collection geodatabase from the Archive folder.  These will remain read-only.</p>
    </div>
    <div class="learnmore">
    </div></div>
    <div class="slidecontainer" data-title="Populate Staging Feature Classes" >
      <div class="slide"> <img src="./images/lifecycle_stage.jpg"></div>
      <div class="caption"><p>After migrating the schema, if necessary, the prior feature classes are copied to the Stage geodatabase, where the records may be modified.</p></div>
      <div class="learnmore"></div>
    </div>
    <div class="slidecontainer" data-title="Stage Changes, Produce New Editions" >
      <div class="slide"> <img src="./images/lifecycle_workflow.jpg"></div>
      <div class="caption"><p>Models may nor be imported and edited, and existing models may have their attributes updated. </p>
      <p>New editions of the collection are formed by sorting the new models and prior archived models according to their new status values. </div>
      <div class="learnmore"></div>
    </div>
    <div class="slidecontainer" data-title="Archive Resources, Retire Workspace" >
      <div class="slide"> <img src="./images/lifecycle_close.jpg"></div>
      <div class="caption"><p>Several new editions may be produced and several new model batches processed in a single model management workspace. At some point, the workspace wil be retired, with the latest edition and the model batches and the workspace itself being archived.  </p></div>
      <div class="learnmore"></div>
    </div>
    </div> <!-- Closes moreslides-->


<hr>

    <h2 id="project">A tour of the ModelMgt ArcGIS Pro Project</h2>
    <p>To get the most out of this tour, you should download a copy of the <a href="http://github.com/CitySchema/ModelMgt" target="github">ModelMgt repository from GitHub</a> and explore the file-system and ArcGIS Pro Project while looking at this tutorial.
    </p>
    <p>The ModelMgt.aprx file, located in the ArcDocs folder is an arcGIS pro project that references the tools and data-sets involved in making changes to the model collection and publishing new editions.  Before digging into the tasks, it will be useful to check the critical preferences settings in this project.  Sometimes ArcGIS initializes these differently when you move or create a new project.
    </p>

    <div class="feature tour">
    <h3>Project Options and Settings</h3>
    <p>In the <b>Project</b> window under <b>Project > Current Settings</b> Notice that we have set the following:
      <li><b>Home Folder</b> is the <b>ModelCollection_Mgt_YYYYMMDD</b> folder that contains all of the resources listed above.  This setting gives you a handy means of jumping to this folder inorder to find any of the resources in the project. 
      <li><b>Default Geodatabase: </b> set to scratch.gdb in your project's Scratch folder.  If this geodatabase doesn't exist, you should create it. 
      <li><b>Default Toolbox:</b> is modelCollection_Mgt toolbox in your project's tools folder. 
      </ul>
     <p>Under the <b>Project > Options > Geoprocessing</b> settings make sure that the following two options are set asd follows
        <ul>
          <li><b>Checked:</b> Allow geoprocessing tools to overwrite the results of prior geoprocessing operations
          <li><b>Unchecked:</b> Remove layers that reference data overwritten by geoprocessing tools
        </ul>

    <h3>Geoprocessing Environment Settings</h3>
    <p>THe following geoprocessing environment settings shold be checked each time you begin using a new copy of the ModelMgt workflow project:
      <ul>
        <li><b>Coordinate System:</b> Massachusetts State Plane Mainland Zone (U.S. Feet) FIPS 2001.  
          <br><b>Vertical Datum:</b> NAVD88 U.S. Feet (Height) 
        <li><b>Current Workspace:</b> Scratch\Scratch.gdb
        <li><b>Scratch Workspace:</b> Scratch\Scratch.gdb
      </ul>
    </div>

<hr>


<h2>Project Layers, Scenes and Maps</h2>
<p>The ModelMgt project includes one map and one 3D scene.  
<p>
  The layers in the Map table of contents provide an opportunity to discuss some of the important source layers that are used by the model management processes.  As we look through them, set your table of contents to <b>View Source Folders</b> so you can see where these data-sets are stored within the <b>Sources folder</b> of your ModelCollection_Mgt workflow folder. 
</p>


<div class="feature tour"> 
<h3>2D Layers</h3>
<figure class="middle">
  <img  src="images/map_contents.jpg">
  <figcaption>2D Layers Portrayed in the Map Pane</figcaption>
</figure>
<p>While we are looking at the layers in the 2D map, you ought to explore theier attributes and properties in the ArcGIS project. </p>
  <ul>
    <li><b>Dev_Log_Pts: </b> The development log is a table that carries information related to the status of projects under review.  Each agency will have a different variation on this.  In Boston, this table keeps track of the status of each project after each meeting of the review board. It also contains the projectID and the URL for the project on the BostonBuilds web site. There is a lot of other useful information about projects, but those three fields are the ones that are most important for understanding which models may need to be promoted, demoted or superseded.
    <li><b>Issue Points:</b>  used to mark issues such as missing models.  Issues with existingt models are marked on the <b>QA_Issue</b> field on the model's attribute table.
    <li></b>Tile Boundaries and Points:</b> are referenced from the <b>Bos3d_Master</b> repository.  The tile center and corner points have elevations -- necessary for making sure our terrain meshes extend exactly to the corners of each tile. 
    <li><b>DEM_3ft_Square_Clip:</b> A raster elevation model clipped for our demo project.  This elevation model is used to check the vertical placement of models and to calculate the geometric envelope for new models.  In a production environment, this 
    elevation model would be a 1-foot resolution raster coverng the full extent of the tile scheme.
    <li><b>Parcels 2020:</b> Parcel boundaries are used to add parcel IDs and Assessor map URLs to new building models. When parcel data is updated, you may want to update the assessing links.
    <li><b>Groundplan Tiles and Ortho Tiles</b> These are the tiled images that were produced for the tiled downloads.  They are provided with the demo data-set for reference.  
    </ul>
  </div>

  <div class="feature funfact">
    <h3>About Re-usable Layers</h3>
    <p>All of the layers for viewing 3d models use the same symbolization for models according to status.  The master layer for this symbology can be found in the <b>ArcDocs\Layers\MP_Status.lyrx</b> file.  This symbology can be applied to any multipatch layer using the <b>Appearance\Import function </b> as described in <a href="https://pro.arcgis.com/en/pro-app/2.7/help/mapping/layer-properties/import-symbology-from-another-layer.htm" target="arcdoc">ImportSymbology from another Layer</a>.
   <p>Any time you change the treatment of the status symbology, it would be a good idea to re-save this master layer. 
     <p>Many group layers are also saved in the layers folder.  It is a good habit to save any of the major group layers to this location any time you make changes to them.
    <p>The project option  <b>Geoprocessing > Remove Layers that are overwritten by geoprocessing tools</b> should always be un-checked.  Unfortunately this is not the default, and even un-sets itself when a project is copied. As a result, the symbology for layers will get wiped out when geoprocessing tools delete and re-generate data-sets.  You will learn this the hard way many times but be happy that the prior state of these layers and group layers can be recovered. 
    <p><i><b>Note to ESRI:</b></i> it would be great if there was a way for layers to reference the symbology from a saved layer and update themselves automatically. 
    </div>

   
    <div class="feature funfact">
    <h3>About Definition Query View Layers (DQV)</h3>
    <p>The process of updating city-wide multipatch feature classes is complicated because it is often the case that new models can overlap with old models, and because of time required to draw and re-draw city-wide model collections, you can't quickly flick the city-wide model layers on and off to understand how the models relate to each other.  To help keep the model collection visually sorted the 3D scene makes use of Definition Query Views that use SQL expressions to limit the features displayed.  Views based on definition queries are identified with <b>DQV</b> appended to their names.  
    <p>Views filtered with definition queries are much quicker to flick on and off. Another handy feature of this technique is that multipatch models sort themselves into appropriate views and symbology immediately when their Status attribute is updated.
    </p> 
    <p>Layers that have definition query filters applied are named with a <b>DQV</b> suffix so that people don't get confused by omitted records. 
  </div>

    <div class="feature tour">

      <h3>The 3D Scene and its layers</h3> 
      <p>The 3D scene and its table of contents is the hub of the ModelMgt project all of the tools reference layers from the table of contents of this 3D scene. It is also the view upon which all review and edit tasks are carried out. </p>
  
      <figure class="middle">
        <img  src="images/scene_contents.jpg">
        <figcaption>Figure 6: 3D Layers Portrayed in the 3D Scene Pane</figcaption>
      </figure>
    <h3>3D Layers</h3>
 
    <ul>
      <li><b>Prior Archived Unfiltered Group Layer:</b> This group layer includes a layer for each of the multipatch layers that were released with the prior archived model collection.   These make up the initial state of the collection before any changes are made.  No definitioan queries apply to these layers. These layers should be considered read-only.  In case this layer needs to be reconstructed, a copy is saved in the PriorArchived folder. 
      
      <li><b>Stage Unfiltered Group Layers:</b> This group layer includes a layer for each of the multipatch layers created for the next edition.  In a brand new ModelMgt workflow folder this may not exist yet.  It can be created by adding the Prior Archived Unflitered layer and changing the source references for each layer.   This group layer should also be saved with the NextEdition geodatabase for the convenience of users who want to add it to other projects.  
        
      <li><b>Prior Archived and Next Edition Layer Demo:</b> Represents the each of the multipatch feature classes in the prior archived edition, but with styling and definition query views that make it easy to review the collection, toggling the demolition candidates fromthe Active_MP feature class with models from Proposed_MP.  Definition query views are identified by including a <b>DQV</b> suffix in their names.  These layers are the basis for Scene Layer packages that would be published to ArcGIS on-line.  
       
     <li><b>Stage Edit Views:</b> Because the staging process involves changing the Status of models, it can be difficult to see what is happening as new models sometimes completely cover existing models.  This situation is made worse by the fact that flicking the Active_MP layer on and off can take minutes.  To streamline the staging and review process, this group of Status-based definition queries and group layers provides a preview of the layers as they would appear inthe final layer previews.  When staging status changes to the layers in this group, models appear to dissappear form one layer and appear on another when the status is changed.  You may want to adjust these based on your own experience and preferences. 

          </ul>
        </div>

<hr>

      <h2 id="tools">Explore Tasks and Tools</h2>
      <figure class="right">
        <img  src="./images/tasks.jpg">
        <figcaption>ArcGIS Tasks provide a high-level ordering of procedures.</figcaption>
      </figure>
      <p>  There are several procedures involved managing your model collection.  The ModelMgt project uses <b>Tasks</b> to break the model management process into a sequence of stages.  The tasks include instructions that guide theuser throughthe stages of initializing the workspace, adding new models, updating attributes, editing models and publishing the next edition.  Most of the tasks are linked to geoprocessing tools that prompt the user for parameters and carry out procedures.    
      <p>
      Click on <b>View > Tasks </b> to explore how the tasks order the steps organized as task groups.  Expand the groups to reveal the individual tasks.  These wil be discussed in detail below. 
      </p><p>
      The technical user should <a href="https://pro.arcgis.com/en/pro-app/latest/help/tasks/whatistask.htm" target="arcdoc"> be familiar with how tasks are put together with geoprocessing tools</a>.  While this new feature of ArcGIS pro does make things a little easier, unexpected issues may crop up that require some trouble-shooting skills.
      
      <h3 style="clear: both">Geoprocessing Tools</h3>
      <p>
      Most of the prepared tasks call on custom-made geoprocessing tools.  To cut down on confusion with 3D models, we are going to call geoprocessing models "tools."  Use <b>View > Catalog </b> Pane to expose the catalog on the right-side of the ArcGIS window.  Expand the toolboxes group and the <b>City3D_ModelMgt.tbx</b> toolbox.  You will notice that the first five tool groups have names that correspond with the task groups.  Expand these and have a look at the various tools. 
      </p>
      <figure class="right">
        <img  src="./images/tools.jpg">
        <figcaption>Model Management Toolbox in Catalog Pane</figcaption>
      </figure>
      <p>
        Notice how the individual tools are named with numbers corresponding to the tool group and letters referring tothe general order that they might be used.  Sticking with this convention makes it easier to find the custom tools when confronted with the huge drop-down list that is used in the Task editor.   
      </p><p>Not all tools are associated with tasks.  SOme of them, such as the ones in the pbcGIS_utils tool group are handy utilities.  The Rumpus tool group contains tools that you might create to preserve one-off procedures that you may want to repeat or re-use. 
      </p>

      <h3>ArcGIS Tasks and Geoprocessing Tools are Self-Documenting</h3>
      <p>
      A very handy aspect of the ArcGIS geoprocessing framework is that custom-built tools automate many steps that can be thoroughly understood by examining the tool in <b>Edit</b> mode.   We carry this further by adding graphic labels to the model itself where clarification and further instruction might be useful. 
      With all of this, the tools can be considered self-documenting.  This alleviates the need for a very detailed discussion of the internals of tools in this documentation.    Right-click on a tool and choose <b>Edit</b> to have a look at the tools.
      </p><p>
      Users should be very familiar with trouble-shooting <a href="https://pro.arcgis.com/en/pro-app/latest/help/analysis/geoprocessing/basics/geoprocessing-quick-tour.htm"target="arcdoc"> ArcGIS Geoprocessing tools</a> and <a href="https://pro.arcgis.com/en/pro-app/latest/help/tasks/whatistask.htm" target="archelp">tasks</a>.  There are many ways that ArcGIS geoprocessing tools can get messed up. This documentation can't cover all of these possibilities.
      </p>
    
      <hr>
 
    <h2>Getting Started: </h2>
    

    <p>The best way to get started with the model management workflow is to download the <a href="http://github.com/CitySchema/ModelMgt" target="github">demonstration repository on gitHub. </a>.  Work through all of the procedures documented here just to see that they all work with the demonstration data provided. Once you are comfortable with the workflow, you can make a copy of the template, remove the geodatabases in the <b>Prior_Archive</b> folder and the <b>Stage/Stage.gdb</b>.  Then youcan initialize a fresh workspace and make whatever modifications you need. 
    </p><p>


    <h3>Inspect and Modify ModelMgt_Config Data</h3>
    <figure class="right">
      <img  src="./images/config_data.jpg">
      <figcaption>Model Management Config Data</figcaption>
    </figure>
    <p>Before any work is carried out toward the next edition of the model collection, you have an opportunity to modify the schema for model feature classes.  The master template for all multipatch feature classes and the tables that establish the coded domain fields for model status and QA Flags are kept in the <b>Stage/ModelMgt_Config.gdb</b>.  If you are going to make changes to any of these, it is critical to make them when you are initializing the workspace.      
      <p>Any changes you want to make to the multipatch feature class schema should be made to the <b>Model_Mgt_Config/Model_Template_MP</b> feature class. As we work through the tools in the first tool group, you will see how changes the domain tables are propagated to all new feature classes.  The tool <b>1a. Create Model Template </b> can be helpful for creating and modifying a new model template based on an existing model feature class. 
    </p>
    <hr>

    <h3>Prepare Prior Archive Feature Classes</h3>
    <p>The geodatabases in the Prior Archive folder provide reference for initial state of models before any  updates and additions are carried out during the lifecycle of the Model Management workspace.  To assure that all of the changes made to the model collection are traceable and reversible, it is important that the prior archived collection be latest edition created by the previously retired Model Management Workspace. Feature classes in this folder are strictly read-only. 
      
    <p>If you are making changes to the table schema for multipatches, you should make these changes to each of your prior archived feature classes to make them conform to the ModelMgt_Config\ModelTemplate_MP feature class.  The model management workflows require that the schema for each of model feature class is exactly the same as the template. You might find it useful to make a copy of the tool, <b>1c. Migrate Prior FCs</b> to make a consistent migration for each of the prior feature classes.  Do not alter the original tool which is used for initializing the stage feature classes based on the working model template.  
    </p>
    <p>If you are beginning a model collection from scratch, it is not necessary to have anything in the Prior_Archive folder. 
    </p> 

    <hr>

    <h3>Initialize the Stage Feature Classes</h3>
    
    <figure class="right">
      <img  src="./images/stage_gdb.jpg">
      <figcaption>The Stage Geodatabase</figcaption>
    </figure>
    <p>All of the changes made to the model collection are carried out on the feature classes in the <b>Stage Geodatabase</b>.  This collection is initialized by copying each feature class from the prior archived collection. An additional multipatch feature class is created for <b>New Models</b>.  The Stage.gdb also contains point feature classes representing the Development Tracking Log and <b>Issue Points</b> which are useful for noting issues such as missing models. 
    </p>
  

    <div class="feature tour">
      <h3>The Initialize Workspace Tasks</h3>
      <figure class="right">
        <img  src="./images/initialize_tasks.jpg">
        <figcaption>Initialize Workspace Tasks</figcaption>
      </figure>
       <p>These tasks are organized to help guide the set-up for a new model management workspace. As discussed above.  
        <ol>
          <li><b>Update Domains:</b> If you have changes to make to the Status or the QA_Flag domains, edit the corresponding tables in the Stage\Congig.gdb.  Then run this tool.  This should be run on the Stage.gdb Config.GDB and any active ModelBatch geodatabases.  This task makes use of the Update Domains tool described above.  
          <li><b>Initialize Stage feature classes</b>.  Each time you initialize a model management workspace, each of the prior model feature classes is copied to the stage geodatabase. This uses the <b>1c. Migrate Prior Archived FCs </b> tool, but changes the name of the output worlkpace and prepends the string <b>Stage</b> to the name of each to avoid confusion.</a> 
          <li><b>Initialize Stage NewModels FC:</b> The newModels feature class in the Stage geodatabase holds any new model that might be imported or created by editing a pre-existing model.  This task uses the <b>1b. Create Models MP</b> tools to create a new empty feature class for the purpose using the current model template feature class.
          </ol>
  
      <p>At this point in the workflow, the stage feature classes should reflect all of the models and attributes as they appear in the prior archived collection.  You are now ready to stage changes!  
      </div>


    <div class="feature tour">
      <h3 id="initialize">Tool Group 1: Initialize the Stage Feature Classes</h3>
      <figure class="right">
        <img  src="./images/initialize_tools.jpg">
        <figcaption>Initialize Workspace Tools</figcaption>
      </figure>

      <p>The tools in the <b>1. Initialize</b> tool group 1 and the tasks in the <b>Initialize Model Management Workspace</b> help out with getting your Stage geodatabase up and running. These tools are called on by the <b>Initialize Model Management Workspace</b> tasks.  And some of them are incorporated in other tools and tasks.    
      </p>
        <ul>
        <li><b>1a. Create New Model Template</b> is handy for creating a new model template based onthe schema of an existing model feature class. .   
        <li><b>1b. Create Models MP FC</b> This tool is incorporated in several other tools and tasks throughout the Model Management process.  It takes the model template and creates a new empty feature class for storing new models. At the same time, it makes sure that the target geodatabase has the proper domains for <b>Model Status</b> and <b>QA Flag</b>.   
        <li><b>1c. Migrate Prior FCs</b> uses the <b>Create Models MP FC</b> tool to create a new models feature class and then takes an input model and appends it to the new feature class.  It uses an iterator to do this once for each of the five feature classes.  
        <li> <b>1d. Update Domains</b>.  In case you just want to update the domains in a geodatabase that contains a 3D model multipatch feature class, this tool is for you.  Note that before you run it, you should update the domain tables in the <b>Stage/ModelMgt_Config.gdb</b>.  
        <li><b>1e. Create Issue Points</b>.  The Issue Points feature class is used to flag places where new models need to be made.  This tool will create a new one.  If the prior archived model collection comes with unresolved issue points, it may be best to copy these over so that you can address the issues during your model management sessions.
        <li><b> 1e. Initialize Development Log</b>.  The development log is a table that includes a row for each development project and contains the latest status for that project and a URL for the agency's web home page for the project.    It is important that the Project ID be a unique key in this table.  I've included the tool here that I created for the Boston Planning and Development Agency. Each agency will have its own variation on this.
        </ul>
      </div>

<hr>

       <h1>Staging Changes to the Model Collection</h1>
       <p><b>Staging</b> is a common pattern in computing that provides a way of making, reviewing and potentially rolling back changes before putting a product into production.  While the standard ArcGIS <b>Editing</b> process allows for changes to be rolled back during an edit session, this <b>Undo</b> capability lastsonly as long as the edit session has not been saved.
       The staging process designed for this workflow assures that any changes that are saved will be traceable to the corresponding records in the PriorArchived collection for the life of the model management workspace.  
       </p><p>It is useful to consider four potential categories of changes that might be made to models in the collection:</p>
       <ul>
       <li>Add New Models
       <li>Update Model Status Attributes
       <li>Modify Existing Models
       <li>Retire or Expunge Models
       </ul>
       <p>The staging workflow allows these changes to be carried out and inspected before a new edition is issued. Issuing the next edition is accomplished by re-sorting themodels in the Stage geodatabase into new feature classes according to the value of their Status attribute. 
      <p>To maintain the roll-back capability, models should never be deleted form the Stage feature classes.  Deletion of models is accomplished by setting the Model Status to <b>Retired</b> or <b>Expunge</b> 
      </p>


        <h2 id="import">Task Group 2: Import, Inspect and Enroll Models</h2>
        <figure class="right">
          <img src="./images/import_tasks.jpg">
          <figcaption>Tasks for Importing and Enrolling Models.</figcaption>
          <br>
          <img src="./images/import_tools.jpg">
          <figcaption>Tools for Importing and Enrolling models</figcaption>
        </figure>


        <p>Importing new models is a useful place to begin the discussion of model updates.  It is often the case that new models create the necessity to do things to existing models and their attributes. This workflow has three stages:</P>
          <ol>
            <li> Create a batch folder for preserving the source files for future reference. This folder contains a geodatabase with two feature classes that conform to the current model template. (described in more detail below. )
            <li> Import one or more models from original source files into the <b>Prep_MP</b> feature class. 
            <li>Check the models and position or repair as necessary.  Assign identifiers and status attributes. 
            <li>Automatically assign geometric and reference attributes.
            <li>Append the models to the <b>Stage\New_Models_MP</b> feature class.  
          </ol>
         <p>It happens that model batch folders are also used to manage the process of editing / modifying existing multipatch models -- which wil be discussed in another section of this documentation. 
         </p> 


        <h3>Model Batch Folders</h3>
        <figure class="right">
          <img  src="./images/model_work.jpg">
          <figcaption>Model sources are stored in Dated ModelBatch folders.</figcaption>
        </figure>
        <p>The citySchema model management scheme preserves original source files for each model that is imported into the collection.  Subsequently, each model's attributes include a reference to the location of the source model in the <b>Archive/ModelWork</b> folder. This capability is useful in case a model needs to be edited or if corruption is discovered.  The staging and archiving of source models is arranged through the use of <b>Model Batch Folders</b> that begin their life in the <b>ModelMgt\ModelWork folder</b>.  A model batch folder is named according to the name of the agency, firm or individual that contributed the model. The name of the batch folder includes a date that reflects the approximate date when the models were created or contributed.  It is not necessary that this date be precise, it is merely a means of making the batch folders sortable.  
        </p><p>
          When the Model Management workspace is retired, all of the model batch folders are moved to the Cty3D_Archive folder --  the home of all of the source material that has gone into the city-wide 3d model since the beginning. 
        </p>

        
<div class="feature procedure">
<h3>Prepare Model Batch Folder and Geodatabase</h3>
<p>This procedure makes use of the geoprocessing tools in the <b>2. Import ~ Edit Models</b> tool group and the <b>Import Models</b> task group.  
</p> 


  <p>The task, <b>Create Batch GDB</b> includes three steps.
        <ol>
          <li><b>Create a new model batch folder.</b> This is done manually.  The batch name consists of the name of the source and then a date string for example: <b>Sasaki_20211225</b>.  The source name could be the name of the contributing firm or individual, the name of a project, or in the case of a batch of edits e.g. <b>Edits_20211225</b>.  These folders wil be created manually using windows explorer. 
          <ol>
        <li>Create a new batch geodatabase.  Use the <b>Create the GDB</b> task to create a new geodatabase in your batch folder. 
            It should be named "batch.gdb".  
        <li>The third step is to create a feature class named "Prep" that will hold imported models. This step uses the tool <b>1b: Create Models MP FC</b> to create the feature class using the current models template and sets up the domains and edit tracking fields. 
          <ul>
            <li><b>Prep_MP</b> feature class will receive provisional models for checking and assigning identifiers 
            <li><b>Ready_MP</b> feature class is for the multipatch models that have had all of their attributes assigned. 
            </ul>
          </ol>
        <p>Having these two feature classes is necessary in situations where you may run the Import tool more than once.  These feature classes are made according to the latest model template and have all of the latest coded domains for Status and QA_Flag.
        </ol>

      </div>

      <p>With a new batch folder and geodatabase prepared, you are now ready to import some models!
      </p>
      <div class="feature procedure">
        <h3 id="inspect">Inspect, Adjust, and Repair Source Models</h3>
        <p>There are many possible workflows one might use for assimilating 3D models depending on the source formatting.  This is an area where experience matters.  For the purposes of keeping this description from  getting too deep in the weeds, we will cover the sort of model submission that conforms with the <a href="../submissions/index.htm" target="outboard">citySchema Model Submission Guidelines</a>.  These would be models in simple triangulated OBJ format that conform to the <a href="../tile_scheme/index.htm#coordinates" target="outboard">Boston Metro Shift coordinate system. </a>
        </p><p>
        Sorry to say, you should always expect problems when importing hand-made models created with design-oriented 3D modeling tools.  Many of these problems will be difficult or impossible to fix in ArcGIS.  Therefore, it is recommended to begin the model import process by carrying out the following steps using the 3D editing tool of your choice.  In our demonstration we are using SketchUp. 
        </p>

          <ol>
          <li>Copy the original model into the batch folder. You will probably have a sub-folder in the batch that refers to the name of the model file. Since a model batch folder is likely to contain more than one model, you should place each model in a sub-folder named for the model. The model/folder  name ought to say something useful about the project -- like its name perhaps with the project ID appended.   
          <li>Copy whatever source information that you might have -- such as the proponent's slide-deck with plans and elevation drawings --  into the same folder.  You might also include a saved copy of the email that you received with the model -- which contains a lot of very useful contact information. 
          <li>Register the model in the appropriate SketchUp tile.  You may have a stash of these working tiles on your PC somewhere.  It is not advisable to have the entire tiles in your ModelMgt folder for the sake of keeping these light.
          <li>Check and adjust the X,Y and Z placement and make geometric changes, such as adding a basement to make sure that the model does not have floating corners when displayed on low-precision terrain models.  
        <li>Use the Materials editor to make all of the faces (both sides) white (rgb 255,255,255). 
          <li> If your source model contains multiple buildings, cut these apart as necessary into separate models and group and name them appropriately.  
            <li>If you have used groups or layers for organizing the geometry of building models, and you think that this organization will be helpful in for people wishing to modify the model in the future, you should save the SketchUp model containing just the new building models into a folder named <b>skp</b> in your model batch folder. 
          <li>Finally, select and export each building model as a triangulated OBJ file.  Export into a sub-directory named <b>obj</b> within your batch folder.  
          <li>It is helpful to name the OBJ files according to the name of the project.  If it is a project that appears inthe Development Log, you might want to include the <b>Project_ID</b> in the name -- e.g. <b>Constitution_Wharf_4568</b> do not include spaces in file names. 
          </ol>
       
      <p>You now have some triangulated OBJ models that are confirmed to be in the correct coordinate system.  </p>
    </div>
      <p>Hopefully your contributors will follow our advice about keeping geolocation information with their models, so that you don't have to go through a lot of trouble to figure out where the model sits in relation to the detailed groundplan.    
      </p>

  <div class="feature funfact">
    <h3>Use Your Favorite Editing Tool</h3>
    <p>Everybody who has spent much time working with 3D has their favorite editing tool.  For simple tasks it may be simple to edit geometry directly in ArcGIS.  When geometry gets complicated, you might prefer another tool that allows for the isolation of geometry into groups and layers that are specific for your model.</p>
    <p>The citySchema project does not make any assumptions about what editing tool you use.  Any tool that can open our SketchUp format tiles or OBJ format models, and can in turn export models in triangulated OBJ format can be used in our model editing and import workflow.  
    </p><p>For our demonstrations we use SketchUp.  We also use the Sketchup Plugion <b>Skimp</b> which allows for the import of OBJ format files. 
    </p>
  </div>
  <div class="feature funfact">
    <h3>Manuscript Models</h3>
    <p>Tools for authoring 3D models typically provide a hierarchal means of organizing geometry in layers and as nested groups. 3D authoring tools also provide ways of describing curves or other shapes in terms of parameters as opposed to explicit vertices. These mechanisms are different from the table-based organization used by ArcGIS -- in which multipatch objects are stored as single mesh objects that are made of triangle-facets. The hierarchal organization of 3D authoring tools provides a way of managing the complexity of models.  The table-based structure of GIS has advantages in terms of scalability.  When transferring a model from its native 3D editing environment into GIS, best results are obtained when the authoring tool is used to flatten the model into a simple triangulated mesh, which translates directly into a multipatch object.  
    </p><p>
    In cases where a model is available in its original authoring format, the editable source document (manuscript) is worth keeping, because the layering and group hierarchy is useful but lost when the model is translated to an exchange format like OBJ format.
    </div>

      <h3>Import, Double-Check and Identify Multipatch Models</h3>
      <p>
      <p>The <b>Import Models</b> task provides user-settable variables for a bunch of model attributes related to model provenance.  The procedure is based on the geoprocessing tool <b>2b. Import Models</b>.    You should chose the <b>Prep_MP</b> feature class in your batch folder for the output. </p>
        
      The Import Models tool assumes that the input models are already properly located in the BosMetro 3D coordinate system -- which they will be if you went through the process of <a href="#inspect"> Inspection and Adjustment</a> described above.  In case the reference for this coordinate system gets broken, you can find the <b>Bos_MaSP_USFt_Shift.prj</b> in your <b>ModelMgt/Tools/Projections</b> folder.  The Vertical coordinate system should always be <b>Navd88 US Feet (Height)</b>  
      </p><p>
        We recommend that you initiate the import process with the <b>Import Models</b> task, which provides a handy interface for assigning values for the <b>Model Batch</b>, <b>Model Credit</b>, <b>Level of Detail</b> and others.  Any of these values can also be set or modified on a model-by-model basis in the next stage. Check the <a href="../model_collection/index.htm#datadictionary" target="datadict">Data Dictionary</a>  for details about these fields.
      </p><p>If all goes well, you should now have one or more models in your Prep_MP geodatabase in your model batch folder!  
      </p>
      <p>The second step of the Import Models task will create new <b>Model_ID</b> values for each of your new models.  
      </p> 


      <div class="feature funfact">
        <h3 id="normals">Problems with Surface Normals</h3> 
        <figure class="right">
          <img  src="./images/goodnormals.jpg">
          <figcaption>A model with correctly-oriented surface normals.</figcaption>
        </figure>
        <figure class="right">
          <img  src="./images/badnormals.jpg">
          <figcaption>A model with bad surface normals.</figcaption>
        </figure>
        <p>One thing that makes 3D models tricker than flat points, lines, and polygons is the problem of lighting and shading.  Multipatch objects are made of triangulated faces. Your computer needs to figure out which direction each triangle is facing in order to shade it correctly.  The orientation of a face with regard to the light source is known as the <b>Surface Normal</b>.  The term "Normal" in this sense refers to vector perpendicular to the face.
        </P>
        <p>
         It happens that one of the most common forms of corruption in multipatch models occurs when surface normals for some or all of the faces in a model are pointed in the wrong direction.  Another way of saying this is that the face or faces are <b>flipped</b> or <b>inside-out</b>.
         When this happens, faces appear to be invisible when viewed from one side or may appear to be dull -- not reflecting light as they should.  These objects also behave badly when you try to color them with ArcGIS symbology.
        </p><p>
         <b>What is the cause?</b> Multipatch objects do not store surface normals explicitly.  Instead, the normal for each face is inferred by a convention called the <a href="https://en.wikipedia.org/wiki/Right-hand_rule" target="outboard">Right Hand Rule</a> that says that the vertices are recorded in counter-clockwise order from the perspective of the lighted side.  With this in mind, it is not difficult to imagine how these inferences might become incorrect.  Especially when a less-then-perfect 3D editing tool is used to create hundreds of new faces by cutting or intersecting complex mesh objects.  There are situations where the ordering of vertices becomes corrupt causing all subsequent faces to be flipped.  This is especially true when the original mesh objects are not validated as closed solids.  
        </p>
      </div>


      <h3>Inspect and Prepare Multipatch Models</h3>
      <p>Once models have been imported into the Prep_MP feature class, they should be inspected in your ArcGIS 3D Scene. Check for problems with surface normals and textures that may not be pure white.  These can be fixed in your editing tool or -- if all faces need to be flipped, you may be able to fix the coloring and surface normals of multipatch models with the <b>Surface Editing tools described below. 
      </p><p>
        There are a few attributes that you should check and set at this time.
      </p>

      <div class="feature procedure">
      <h3>Hand-Set Model Identifiers and Status Attributes</h3>
      <p>
      Now there are a few attributes you should set while your new models are in the <b>Prep_MP</b> feature class"
      </p>
      <ul>
        <li><b>Proj_ID and Proj_Lnk:</b> for model tha represent projects that are in the review process, Proj_ID should be populated with the corresponding ID and the working URL for the project from the Development log. 
        <li><b>Model Name</b> Each model should have a name that may reflect the name of the project given by the development log.  Or it might be the name of a landmark building, vanity address or merely the street address for the building. 
        <lI><b>Status</b> should reflect the model status.  Consult the <a href="../model_collection/index.htm#status_domain" target="datadictionary">Model Status Domain</a>.
        <li>Set the Appear_Dt and Appear_Src to reflect the critical approval or submission dates from the development log. These values should support the validity of the Status.
        <li>Use the <b>3d. Assign Model_ID</b> tool to assign new model IDs to each of the models in the Prep_MP feature class.
        <li>The <b>Model_Batch</b>, <b>Model_File</b> and </b>Model_Date</b> should have been filled in correctly by the model import procedure. 
      </ul>
    </div>
     
      <h3>3e. Assign Geometric and Reference Attributes</h3>
      <p>The next step in enrolling new models is to assign attributes that are calculated based on the model geometry.  This includes assignment of the Parcel ID and Assessor's link, Assignment of the model centroid coordinates and associated links to the oblique imagery in Google Maps and NearMap; and the Tile ID. 
      </p><p>
        The Assign Geometric Attributes tool takes all of the features in the Prep_MP feature class and assigns the attributes, placing the fully attributed models into the Ready_MP feature class.   
        </p>

        <h3>2d. Append Ready_MP models to NewModels_MP</h3>
        <p>After checking the models in the Ready_MP feature class, it is time to append them to the Stage/NewModels_MP feature class.  Use the task, <b>Append Model Batch to Stage New Models FC</b> to accomplish this. 
        </p>
<p>
        At this point, our Stage.gdb includes several feature classes representing the prior-archived state of the model collection, and a <b>NewModels_MP</b> feature class with several new models. 
      </p>

      <h3>Revising a Model Batch</h3>
      <p>If you need to revise a model batch because you discovered a mistake or a few more models turn up that you wish to add and you don't want to start another batch.  Here's what you do:</p>
      <ol>
         <li>Use the <b>ModelBatch</b> and the <b>RecInit_Dt</b> fields to find the records in <b>Stage_NewModel_MP</b> associated with the batch -- and delete them from Stage_NewModels_MP. 
        <li>If you need to import new models, these can be appended to the <b>Prep_MP</b> feature class without any damage to the models that are already in there.  If any of the new models are redundant with ones already imported,you will need to clean these up in Prep_MP.  
        <li>Run the <b>Assign Geometric and Reference Attributes</b> task again.  This wipes out whatever was in Ready_MP.
        <li>Finally, append Ready_MP to Stage_NewModels_MP again. 
      </ol>

        <hr>

      <h2 id="stage">Updating Status Attributes of Existing Models </h2>
      <p>Importing new models is one aspect of updating the model collection.  Next, we will visit each new model to see how existing models may be affected by these new additions. For example, new models may land on top of old models that may need their Status demoted to some phase of demolition. Sometimes existing models need to be modified to clear the site for a new model.
      </p><p>
      The update process also involves looking for models in <b>Stage_Proposed_MP</b> and <b>Stage_Internal_MP</b> that may have been promoted through the approval,permitting or construction process since the last update.  This search may be facilitated by joining these feature classes with the <b>Development Log</b>.   
      </p><p>
      As we look at each of these models, we can refer to current aerial photography to see what we can see.  When changes to status are warranted, we should be ready to update any of the <b>Model Status Attributes</b> as follows: 
      <ul>
        <li><b>Status</b>, 
          <li><b>Appear Date</b>, 
          <li><b>Disappear Date</b>, 
          <li><b>Appear Source</b> and 
          <li><b>Disappear Source</b>
          </ul>  
        <p>It is crucial at this stage that you have made yourself familiar with the <a href="../model_collection/index.htm#datadictionary">Model Attribute Dictionary</a>.  Keep it handy so that you understand how to fill in these fields which are crucial to the integrity of the 3D models collection!
        </p>

      <div class="feature funfact">
      <h3>Model Collection Stewardship is Research</h3>
      <p>There are several aspects of managing the model collection that can be thought of as historical research. This is a useful mind-set for understanding the right sorts of values for the <b>Model Status</b> and <b>Model Provenance</b> attributes.  In the setting of a typical municipal GIS or urban planning department the focus isnormally on information related to present and future situations.  Care has been taken in the design of the model collection schema and management workflows to streamline the update tasks so that preservation of historical information is a side-product that leaves a priceless historical record as a side-effect of collection updates.  While this benefit does not require much additional work,it does require an understanding of the proper assignment of model status attribute values.  
      </p><p>
      The model collection schema is built to support research.  The process of updating the model to reflect current conditions requires the consultation of reference materials such as aerial photos or the development log, permitting and assessing records, etc.  The automated attribute assignment procedure, described above streamlined access to reference resources such as the latest Google Maps or NearMap and Assessing department viewers. The Appear Date, Disappear Date Appear Source and Disappear Source attributes provide a place to record the source documents that confirm these observations.   Proper attribution of this kind is a big time-saver practically speaking.  Reference material must be checked. It is easy to fill in these attributes when the references are at hand.  Recording the facts in the catalog means that the references wil not have to be checked again. 
      </p><p>
      The same model collection schema is useful for pure historical research and development of models of past street-scapes that do not exist anymore.  Over most of the city, we may not have the knowledge and date-integrity to be able to zoom back in time with a time-slider.  One difficulty is that we do not know the true <b>Appear Date</b> for most of the models. Nor do we have models of past structures dating to earlier than 2003.  Nevertheless, the model collection schema would allow an interested person to add historical models and to data to annotate the appear and disappear dates for structures using historical maps.   
      </p>
      <p>Keep in mind that Appear and Disappear dates do not necessarily reflect "year built" or "year demolished". Rather, these attributes reflect the sources that record the date that the structure is first confirmed to exist or to have gone missing. Recording this reference information when you have it eliminates the need to check sources again until a better source of information becomes available.  
      </div>


      <div class="feature funfact">
        <h3>Update Attributes with the Attributes Pane</h3>
        <p>Most of the tasks involved with updating the model collection involve selecting one or more features from the 3D view and changing their attributes.  The <a href="https://pro.arcgis.com/en/pro-app/latest/help/editing/edit-feature-attributes.htm" target="arcdocs"> Attributes Pane </a> is the right tool for this job. This method is easier and safer than trying to edit attributes from the table or with the Calculate Values tool.    
        </div> 
   
   
 

      <h3>Understanding the Stage Edit Views and the Status Routing Process</h3>
      <p>As described in more detail in the <a href="../model_collection/index.htm" target="outboard">The Building Model Collection</a>, the geodatabase view of the model collection is segmented into feature classes according to <b>Model Status</b> This segmentation by status streamlines applications that are focused on the current or near-future views of the model collection.   
      </p><p>
      The segmentation of the collection according to Model Status is useful but requires a little trickery in the development of new editions, since updating the status of a model can cause the model to jump from one feature class to another.  
      Experience has shown that trying to accomplish changes of this kind by copy/pasting multipatch models from one feature class to another is a recipe for disaster -- some of which may not come to light until weeks or months later, whereupon, one has a sickening feeling of wondering how many other models may have failed to copy or paste properly. 
      </p><p>
      The way we avoid this problem is by setting up the Stage feature classes so that any attribute edits including status changes may be made in the Stage feature classes, where they may be reviewed and made logically consistent.  Deletions of models from the collection are flagged by setting the <b>Model Status</b>  to <b>Retired</b> or to <b>Expunge</b>. When the next edition is published, the models in the Stage feature classes are routed to their new feature classes using the <b>StatusRouter</b> tool, which is discussed in more detail below.
      </p>
      <p>
      
      <div class="feature tour">
        <h3>The Stage Edit Views</h3>
        <figure class="right">
          <img  src="./images/stage_edit_views.jpg">
          <figcaption>The Stage Edit Views Permit the Quick Toggling of Features according to their new Status values.</figcaption>
        </figure>
        <p>The process of updating the status of models can be confusing, since it is often the case that new models completely cover previous models.  It is helpful to be able to turn classes of models on and off according to their new status values.  This can be troublesome, because the Active_MP layer with its 140,000 models takes a long time to draw.  Many hours of trying to work around these awkward problems has led to the development of a set of <a href="https://pro.arcgis.com/en/pro-app/latest/help/mapping/layer-properties/definition-query.htm" target="arcdoc">Definition Query Views</a> that sort the features in the Stage feature classes into previews of the final sorted feature classes.   The neat thing about this is that picking a new status for a model causes the model to immediately disappear from one definition query view and appear in another with the appropriate symbology.  This allows a very convenient way of checking the logical consistency of the collection as we are updating it. 
        </p>

      <h3>Explore the Stage Edit Views</h3>
      <p>The illustration to the right shows how the stage edit views use group layers and definition query views to sort the Stage feature classes into group layers that simulate the final status layers.  
      <p>The <b>Stage_Active_MP</b> feature class is further broken down into the <b>Stable</b> features (those that continue to have a status of Current) and <b>Demolition Candidates</b> those that have a status that is some variation of <b>Demolished</b> It is handy to be able to toggle the demo candidates with the models in the <b>Proposed Preview</b> group layer while checking to make sure that your updates are logically consistent. 
      <p>Working with these layers while making updates takes some practice. You may decide to modify these definition queries once you have fooled around with these.  
      </div>

      <div class="feature funfact">
<h3>Regenerating or Modifying the Stage Edit Layers</h3>
<p> It is inevitable that you will lose or want to modify or recover one or more Stage Edit Views.  The masters of the current working version of the entire group layer is stored in the <b>ArcDocs/Layers</b> folder in the current Model Management workspace. If you make changes to yours, be sure to save the group layer there!    
</p><p>
  It took a while for me to figure out that it is very important to uncheck the the option <b>Remove layers that have been overwritten by geoprocessing tools</b> in the ArcGIS Pro <b>Project > Geoprocessing</b> Options.  Otherwise these layers keep disappearing!  
</p> 
<h3>Odd behavior of Sticky Definition Querys</h3>
<p>At ArcGIS Pro 2.9 we have a problem of queries that seem to be edited but then revert back totheir old values once you save them.  I have found that it is sometimes helpful to:
  <ol>
    <li>Change the query
    <li>Then click the green checkmark above the query window.
    <li>Look at the values againtomake sure that they reflect your changes.
    <li>If not, remove the query and build a new one from scratch.
  </ol>
</div>
     
      <div class="feature funfact">
     <h3>Never Delete Models from the Stage Feature Classes</h3>
     <p>The principle of reversibility for all edits made in this model collection management workflow requires that models not be deleted from any of the Stage feature classes.  To prevent a model from making it to the next edition, you can set its status to <b>Retired</b> which is the normal procedure.  Or for models that are exact duplicates or corrupted, you can set the status to <b>Expunge</b>, which will cause the model to be ignored by the <b>Status Router</b> tool when the next edition is produced.   
     </p><p>
      The exception to this rule is that you are allowed to delete models from the <b>NewModels_MP</b> feature class. 
     </div>
       

<h2>OK!  Lets GetStarted!</h2>
<p>Enough chitchat.  Lets continue updating the collection!</p>

     <h3>Visit Each New Model</h3>
     <p>Assuming that you have imported some new models, and appended them to the <b>Stage_NewModels_MP</b> feature class, a usefulway of structuring the task of integrating these is to zoom to each one.  A handy way of doing this is to open the attribute table of unfiltered NewModels feature class, sort it according to its Object_ID, then zoom to each model.  While you are looking at it in the 3D Scene, you can check sources like aerial photography (links provided in the model attributes.)  This will confirm the model status and the demolition status of the other buildings in its context. Some of these extant models may require edits to make them logically consistent with the new models. 

 
      <h3>Check Proposed Models for Construction / Demolition Activity</h3>

        Notice that Proposed models that have changed their status to <b>Under Construction</b>     
        
        We can now begin the process of checking and updating the values of model status attributes for these models.  To begin with, it is important to have a clear understanding of the purpose for each of the attributes.  So please review the <a href="../model_collection/index.htm#datadictionary">Model Collection Data Dictionary</a>.  
      </p>
      <h3>Overview</h3>
      <ol>
        <li>Visit each of the new models.  If you have had more than one batch, it can be helpful to sort the NewModels feature class according to the Record Initialization Date (RecInitDt).
        <li>Use your most current reference image, which could be Google Maps, Google Earth or NearMap to see what has been happening in the context of the new model. 
        <li>Update the Model Status attributes to reflect the status of the new model and other models that may be affected by the new project.  While you have the reference material in front of you, update the values Appear Date, Appear Source and Disappear Date and Disappear Source.  For example, 
            <ul>
              <li>For new models that have a status of Approved or Permitted, the Appear Date can reflect the date of the project approval or permission as reflected in the development log. The Appear source should be the development log with its issue date. 
              <li>For existing models that would be affected by approved or permitted  projects, change their status to <b>Approved Demo</b> or <b>Permitted Demo</b>. 
              <p>While you have the most current photography at hand, it is useful to use the <b>Disappear Source</b> attribute to record your observation of whether there is any site work going on, or of the existing structures remain unchanged.   
              <li>It is often the case that models affected by new development may have to be modified since the new project may call for the removal of parts of existing models while leaving other parts intact.  These models should have their <B>QA Flag</b> set to <b>3D Edit Candidate</b>.  These will be dealt with later. 
              <li>If a new model is a new project proposal that supersedes an existing proposal on the same site, the older model may have its status changed to <b>Superseded Proposal</b> and the <b>Disappear Date</b> should be the same as the appear date for the new proposal. 
              </uL>
      <li>Notice that when models in the Active feature class have their Model Status values changed to <b>Demolished</b>, <b>Modified</b>, these models disappear from the <b>Stage Active Preview</b> group layer to one of the definition query views in the <b>History Preview</b> group layer. This allows you to quickly toggle these alternate views to expose any small models that may otherwise be hidden under other models.    
      </ol>
     <div class="feature procedure">
       <h3>Time-Series Imagery in Google Earth</h3>
       <p>Google Earth is a free tool that includes a deep store of recent and historical aerial imagery. The historical imagery can be viewed by clicking the button shown at number 2 in the image below.</p>
        <figure class="middle"> 
          <img  src="images/google_earth.jpg"> 
          <figcaption>Google Earth is a great free research tool.</figcaption>
        </figure>
      <p>You can quickly zoom to a site in Google Earth by copy-pasting the latitude and longitude from the model's attributes into the Google Earth search box as shown at number 1 in the figure, above.  
     </div>

     <h3>Promote Status of Proposed Models</h3>
      <p>Reviewing all of the new models and their context will have led to many changes in other feature classes.  There may be other changes needed to reflect the advancement of projects through the design review process.  These changes can be found by looking at models in the <b>Stage_Proposed_MP</b> and <b>Stage_Internal_MP</b> feature classes and comparing the value of <b>Status</b> in these feature classes with the <b>Project Status</b> attribute in the Development Log.  To facilitate this, it may be helpfulto join these feature classes with the current Development Log using the <b>Project ID</b>. Select by attribute queries or new definition query views can be created to highlight models that are candidates for promotion or demotion.  These change candidates should be checked one-by one.  With reference to the most current aerials.  Then the same update procedure as described above, can be carried out. 
      </p>
      <p>
        Remember that the values of <B>Appear Date</b>, <b>Appear Source</b>, <b>Disapp_Dt</b> and <b>Disapp_Src</b> attributes should also be updated to reflect the change in status while you have all of the source material at hand. 
        </p>

     <h3>Don't forget to update the edit fields!</h3>
     <p>As described in the data dictionary, the Record Modification fields are updated automatically by ArcGIS.  These are very useful for traching and sorting recent modifications.  For better or worse, there is no way to stop these fields from being re-set when the model collection is migrated to the next edition.  Yet, it is important for users and managers tobe able to understand the changes that have been made to the models and their attributes.  Therefore, it is up to you to set the values for <b>Editor</b>, <b>Edit Date</b> and <b>Edit Action</b>.  
     </p><p>
      Most of the <b>Edit Actions</b> that happen to the stage feature classes during the staging process can be described as "Updated Status Attributes". The <b>Update Edit Fields</b> task facilitates updating the Edit fields by looking for records in each of the Stage feature classes (except for Stage_NewModels_MP) that have a Record Modify date later than both the Recode Init Date and the Edit Date. These are records that have been modified during at somepoint inthe lifespan of the ModelMgt workspace, but that have not yet had their edit fields updated.  These records have a new Edit Date assigned and the value of Edit User is set to be the same as the Record Modified user.  
     </p><p>
       It would be cool to be able to preserve the original Record Modified date, but unfortunately ArcGis updates the modification date before doing the modification.  
       
<hr>

      <h1 id="edit">Model Edit Flagging and Workflows</h1>

      <p>In the course of your adventures trying to fit new models into their urban context you wil have come across various situations where models need to be edited or created.  Normally these situations are flagged for attention later.  There are four model editing scenarios that eachhave their own workflows soitmakes sense to accumulate this work and handle edits when you can shift intoa different mode. 
      </p><p>
      Here are the edit workflows and how to flag them:
      </p>
      <ul>
        <li><b>New Model:</b> Flag in <b>Issue Points</b> feature class. 
          <ul>
            <li>Create in external editor, handle with model import workflow. 
            <li>ArcGIS Model Creation Workflow.
          </ul>
        <li><b>Model 3D Edit:</b> Flag with <b>QA Flag</b> = <b>3D Edit</b>
          <ul>
            <li>Modify in in external editor, handle with model import workflow. 
            <li>ArcGIS model editing workflow. 
          </ul>
        <li><b>Surface Edits:</b>
          <ul>
          <li><b>Remove Materials (Textures or Colors):</b>   <b>QA Flag</b> = <b>Remove Color</b>
            <ul> <li>Use surface edit workflow</ul>
          <li><b>Flip Surface Normals (all faces):</b> <b>QA Flag</b> = <b>Flip Faces</b>
            <ul> <li>Use surface edit workflow</ul>
          <li><b>Flip Surface Normals (subset of faces):</b> Flag with <b>QA Flag</b> = <b>3D Edit</b>
              <ul> <li>Must be edited with external editor and imported with model import workflow. .</ul>
          </ul>
        </ul>
        
      <h3>Setting Status for Edited Models</h3>
      <p>When models are flagged for editing, there are two options for dealing with the status of the prior version of the model.  
      </p><p>
        In the case of 3D model edits, if a model is being split to reflect a demolition of part of the real world structure, then the status for the prior model should be set to<b>Modified</b> so that the original model of the prior condition will be routed to the <b>History_MP</b> feature class. See the note on <a href="#modified">How the <b>Modified</b> Model Status Saves You Time</a>.
      </p><p>
        If a model is flagged for 3d Edits for a repair, or if themodel splitting operation is going to produce complete models of the persistent part of the structure as well as a model of the portion of the structure that will be removed, then the status of the prior model should be set to <b>Retired</b> 
      </p><p>
        In the case of surface edits when the new model is geometrically identical with the prior version, the status of the prior model would be set to <b>Expunge</b>.
      </p>


      <h2>Workflow Creating Editing Models Outside of ArcGIS</h2>
      <p>3D editing tools are very diverse in terms of their capabilities and interfaces.  It makes sense that people are inclined to use tools that they are familiar with.  The capabilities of ArcGIS Pro for 3D model creation and editing are a moving target.  It has been my experience that there are some models that are not easy to edit in ArcGIS.  But I know that this is an area that ESRI is working on.   
      </p><p>For any of the model creation or editing workflows, it should be easy to use the downloadable models from <a href="../repocat/index.htm" target="outboard">The Repository Catalog</a> to use as source material.  Inmost cases, recent orthophotography is available for use with the tiled models.
      </p><p> 
        The products of these edits would then be introduced through the normal model import process described above. 
      </p>
      <h2>Workflow for Editing and Creating Models with ArcGIS Pro</h2>
      <figure class="right">
        <img  src="./images/arcgis_edit_tasks.jpg">
        <figcaption>The Edit Models with ArcGIS task group.</figcaption>
      </figure>
      <p>Creating and editing models with ArcGIS is carried out in a Model Batch folder.  I recommend starting a new batch for this purpose.  If you are editing model from the pre-existing Stage feature classes, you may begin by copying these to a feature class in the Batch Geodatabase.  Then you have freedom to try things and make mistakes and check and revise your altered models before pasting or appending them into the <b>Prep_MP</b> feature class.  Once there, the procedure for adding model-specific attributes and the automatically generated attributes is the same as outlined in the section on <a href="#import">Importing Models</a>.
      </p><p>
        Models created this way are appended to the <b>Stage_NewModels_MP</b>  feature class and integrated into their context just like new models.  
      </p>
      <h2>Workflows for Surface Edits</h2>
      <figure class="right">
        <img  src="./images/surface_edit_tasks.jpg">
        <figcaption>The Edit Models with ArcGIS task group.</figcaption>
      </figure>

      <p>If a model is completely inside-out as described in the sidebar: <a href="#normals"> Problems with Surface Normals</a> you can fix it with the geoprocessing tool, <b>4a. Flip Faces</b>. This tool is accessible through the <b>Surface Edits > Flip Normals </b> task.  Note that this tool flips all of the surfaces in all of the input models. 
      </p><p>
      Similarly, the task <b>Surface Edits > Remove Materials / Colors</b> will turn all the faces of all of the input models to white -- which is a requirement if you wish to apply thematic colors to models in ArcGIS Pro. 
      </p><p>
      Both of these workflows can be handled in a ModelBatch folder/geodatabase, but they also can be dealt with with the following steps:
      </p><ol>
        <li>Select the affected models from their Stage feature class.
        <li>Set the value of QA Flag appropriately. 
        <li>Run the task or tool to flip the normals or remove materials.
        <li>The tool creates a new feature class in the Scratch folder and adds it to the table of contents of the 3d scene. New model IDs and and the values for <b>Edit User</b>, <b>Edit Action</b> and <b>Edit Date</b> are appropriately set. 
        <li>Check the models.
        <li>Append the fixed models to the <b>Stage_NewModels_MP</b> feature class.
        <li>Set the <b>Status</b> forthe original models to <b>Expunge</b>.
        </ol>

        
        <div class="feature funfact">
          <h3 id="modified">How the <b>Modified</b> Model Status Saves You Time</h3> 
          <p>A common editing workflow comes into play when an existing model needs to be split to accommodate a new model of a proposed structure that will preserve part of the existing one. At the end of the process, you can have a new model that represents the portion if the existing structure that will return to the Active feature class.  And you may also end up with have a second new model that represents the "historical" portion of the original structure that is to be demolished.  As it happens, this process of model editing may be trickier and more time consuming than we would like.  
          </p>
          <p>[Illustration Needed]</p>
          <p> 
          For model curators who are primarily future-oriented, there may not be a clear business case for spending half a day trying to neatly dissect both sides of this complex cutting procedure.  Asit happens, cutting models can be very difficult -- especially when the models do not verify as being fully closed, or "water tight."   
          </p><p>
          In consideration of this fact, we have established the <b>Modified</b> status for models.  The first task is to cut the existing model and to end up with a model that represents the portion that persists.  The original model, in its entirety has its status set to <b>Modified</b>.  This status will cause the entire old model to be shifted to the <b>History_MP</b> feature class.  The new partial model willhave its status set to "Current" and after going through the process of editing and importing through a model batch, it will move through the <b>NewModels_MP</b> feature class and eventually wind up in the <b>Active_MP</b> feature class. 
          </p><p>
            The <b>Disappear Date</b> for modified models should be set to the date when the partial demolition occurs.  For the "Current" portion of the model, the Appear Date should be set to the same date. If you think about how a time-slider will work, you can imagine that when rendering a past scenario, the original, whole, model will be displayed up until that date.  When the slider moves through the curren time, the modified model will disappear and the new model and the remaining portion of the old model will appear. 
            <p>
              It <b><i>is</i></b> confusing that the Appear date of the current portion of the modified model is recent, when the actual structure may be 100 years old.  This is one reason why this Appear Date is not called <b>Year Built</b>.  The original year built for the structure, if it is known could be preserved as the Appear Date on the historical version of the modified model.    
            <p>This situation is an illustration of why the model collection and its attributes is primarily concerned with <b>Models</b> and not with <b>Buildings</b>. 
            </div>


<HR>      
    
    <h1 id="nextedition">Preparing the Next Edition Model Collection</h1>
    <p>All of the data wrangling discussed above has brought newmodels into the collection and many of the previously existing models have had their model status attributes updated.  To finally produce the next edition of the model collection, all of these models need to be sorted into new feature classes according to their new status values.  These newfeature classes can then be used to create new web scenes, published on-line or exported to tiled model collections.   
    </p><p>Each editionof the collection also contains a model catalog -- a table of all of the models that is not segmented by status -- whcih can be used by applications that help model users discover updated models andmodels that have been retired or expunged. 
    </p>

    <h2>Tasks and Tools for Publising the Next Edition</h2> 
    <figure class="right">
      <img  src="./images/next_edition_tasks.jpg">
      <figcaption>Produce NextEdition Tasks.</figcaption>
      <br>
      <img  src="./images/next_edition_tools.jpg">
      <figcaption>Produce Next Edition Tools.</figcaption>
    </figure>
    <p>The <b>Produce Next Edition</b> task group makes use of the tools inthe similarly named tool group.  The basic workflow steps are outlined below:
    </p>
   <ol>
    <li>The <b>Initialize Next Edition GDB Task</b> Creates an geodatabase in the <b>ModelMgt\NextEdition</b> folder.  The new geodatabase includes a set of  empty feature classes based on the currentmodeltemplate ready to recieve the new collection.  As discussed under the heading <a href="#lifecycle">Lifecycle of the Model Management Workspace</a>, the <b>NextEdition</b> folder can contain several updated editions of the model collections based off of the same PriorArchived collection. Each of these new editions is distinguished by a YYYYMMDD date stamp that reflects the date that the new edition was initialized.
    <li>The task, <b>Check for Bad Status Values</b> should now be run to make sure that none of the Stage feature classes include non-standard values for Status.  These can creep into the mix if aperson updates status values outside ofthe Attributes panel.  The danger of letting badvaluespersistbefore the next step is that models with bad statusvalues will dissappear without a trace.  (They can be recovered, but only after someone notices that they are missing.)
    <p>This task will haltwith an error if a bad status value is encountered.  Looking through the task's messages will reveal which feature class has a bad status value.   
    <li>The task, <b>Sort Models into New Feature Classes</b> uses the geoprocessing tool, <b>5d. Status Router</b> to iterate through eachof the multipatch feature classes inthe Stage geodatabase, selecting models according tostatus class, and appending each set to the appropriate feature class.   
    <li>The <b>Copy Misc FCs and Create Building Footprints</b> task copies the Issue Points and Development Log table from Stage into the next edition feature class.  These are useful to include for reference.  The building models from the Active_MP feature class (excluding walls) are alsorendered as apolygon feature class with this task.
    <li>Finally, the <b>Generate Model Catalog</b> task produces the one-table comprehensive catalog of models.  The table starts as a geodatabase point feature class, and is also rendered as a CSV table and a GeoJson file. 
    <ul>
    
    
    <hr>

</div> <!-- Closes #article div -->

    <div id="footer"> <!-- Content provided by cityschema_includes.js--> </div> 
  </div> <!-- Closes main container--> 
</div> <!-- closes grid container-->
</body>
</html>
    