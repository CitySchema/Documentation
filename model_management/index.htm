
<!doctype html>
<html lang="en">
<!-- Hi Folks, this is the template file for pages in the citySchema.org documentation library -->
<head>
    <title>Model Collection Management</title>
    <meta name="description" content="Covers the procedures formanaging a collection of 3D building models as part od a GIS-based city modeling project.  Par of the citySchema.org framework fro developing, sharing and preserving city model assets. ">
    <meta name="keywords" content="City Modeling, Digital Humanities, Geography, citySchema">
    <meta name="author" content="Paul B. Cote">
    
<!-- don't edit between here and the Article div.  -->
    <link rel="icon" href="../resources/images/favicon.png" type="image/x-icon">
    <script src="../resources/jquery/jquery-3.6.0.min.js"></script>
    <link href="../resources/cityschema.css" rel="stylesheet"> 
    <script src="../resources/slideshow_pbc.js"></script>
    <link href="../resources/slideshow_pbc.css" rel="stylesheet"> 

    <!-- The index sidebar and all content other than the main article coe form the cityschema_includes.js.
          When you add a new page or internalachcor, you should update the index in cityschema_includes.js.-->
    <script src="../resources/cityschema_includes.js"></script>
    <!-- THis has to come after the cityschema_includes file-->
    <script src="../resources/cityschema.js"></script>
</head>
<body>
    <div id="grid-container">
      <div id="index-container">
         <div id="index-header"> <!-- Content provided by cityschema_includes.js--> </div>
         <div id="index">        <!-- Content provided by cityschema_includes.js--> </div>
         <div id="index-footer"> <!-- Content provided by cityschema_includes.js--> </div>
      </div> 
      <div id="main-container">
        <div id="header"> <!-- Content provided by cityschema_includes.js--> </div>

<!-- Page content goes inside the article div -->
<div id="article">
  <h3 class="section_title"></h3>  <!-- Optional: would be the tile of the intro chapter. -->
    <h1 class="title">Managing the Building Model Collection using ArcGIS Pro</h1>
  
<p style="background-color:khaki"><b>This page is currently under development!</b>  <br>November 22, 2021.</p> 

    <p>This page provides an overview of the procedures and tools for managing the collection of 3D models od buildings, bridges, walls and docks as part of a city model within the <a href="../home.index.htm">citySchema.org framework for developing, sharing and preserving city model assets</a>.
    </p><p> 
    The workflow and tools described on this page ca nbe demonstrated using the <b>citySchema: Model-Management-ArcGIS repository shared on github (soon)</b>.  We start with the ArcGIS Pro workflow because our municipalGIS managers tend to have licenses for this tool-kit.  The ArcGIS model for representing 3D geometry as geographic features is well suited to the task. We anticipate that the concepts and procedures described here may be implemented on other platforms with the same result. 
    </p> 
    <h3>Table of Contents</h3>
    <ol>
      <li><a href="#roles">Enterprise and Technical Viewpoints</a>
      <li><a href="#foundation">Foundation Concepts and Data Dictionary</a>
      <li><a href="#context">Filesystem Context </a>
      <li><a href="#tour">Tour of the Model Management Workspace Folder: Data Management</a>
      <li><a href="#lifecycle">Lifecycle of a Model Management Workspace</a>
      <li><a href="#project">Tour of the ArcGIS Pro Project: Properties, Layers and Views</a>
      <li><a href="#initialize">Initializing the Workspace</a>
      <li><a href="#import">Import, Inspect and Enroll Models</a>
      <li><a href="#stage">Promote and Demote Models</a>
      <li><a href="#edit">Model Editing Workflows</a>
      <li><a href="#nextedition">Publishing the Next Edition Model Collection</a>
      </ol>


<HR>


    <h2 id="roles">Enterprise and Technical Viewpoints</h2>
    Before digging into the technical details of <b>How</b> to manage a city-wide collection of 3D models, it will be uesful to have a picture of the sorts of people for whom this scheme has been designed, and the personal and institutional <b>motivations</b> that make this effort worthwhile.  The <b>Technical User</b>, is the sort of person who you find making edits to geographic data in a municipality. 
  </p><p>
    
    The <b>IT Manager</b> is accountable for taking care of the institution's information.  This role involves hiring and evaluating the work of technical users who may be employees or contractors.   
    For the IT manager, a successful architecture results in a collection of assets that is sustainable even without the particular individuals holding the position of technician or manager. For the IT manager, it will be useful to understand the essential pieces of the city model, where they are stored, and the sorts of problems that are likely to occur.
  </p><p>
    <b>Managing a collection of 3D models is different from managing traditional two-dimensional GIS data.</b> Points, Lines and Polygons are easy to visually inspect and to repair with a few strokes of the cursor.  Rules of 2D topology can be evaluated automatically.  Many of the problems that occur with GIS-based 3D model collections are more difficult to discover.  There are many data-sets involved, including historical models, alternative models, superseded proposals, retired models, etc, which are rarely looked at.  3D models are tricky to repair and replace -- particularly if the source files are no longer available.  When a 3D model is corrupt, the effect is sometimes invisible in one context,such as the desktop GIS application, but becomes evident when the model is translated to another format.  it is often the case that problems such as lost or corrupted models are not discovered for weeks, and when they are, it can be difficult to trace the problem or to know how many other models may have been affected.  
  </p><p>
    The special problems of managing temporally and geographically extended collections of 3d models explain the importance of the special pains taken in designing the model management workflow to safeguard against accidental data loss, to maintain an audit trail for all changes,  to assure a roll-back capability, and to keep track of source data.  
    </p><p>
    Managers and technicians should each read this documentation to understand the scheme for naming and labeling assets. To be aware that there is a place for storing and finding every piece of the city model.  This will relieve the technician from having to make thousands of new decisions, and learning from the unsuccessful ones.  It will also assure the manager that the information resources are recoverable even after the technician unexpectedly "wins the lottery". 
    </p>
  

<HR>

    <h2 id="foundation">Foundation Concepts</h2>

    <p>For model curators, it is essential to understand the conceptual overview of the model collection, including definitions of important terms and a data dictionary issued in the document: <a href="../model_collection/index.htm" target="reference">Overview of Building Model Collection and Catalog</a>.  It is particularly important to understand the <a href="../model_collection/index.htm#datadictionary" target="reference">Data Dictionary</a> with all of the meanings and values expected for each of the model attributes.</p> 
      </p><p>
    The Building model collection the most intensively managed component of the city-wide 3D model. The model collection framework supported by this workflow prepares the model collection to become one of the components of the <a href="../repocat/index.htm">citySchema Repository Catalog</b>  city model publishing and archiving strategy.
    </p>    <p>
    <a href="https://github.com/CitySchema" target="github">citySchema templates shared on GitHub</a> are a recommendation.  Your organization may develop its own data dictionary and metadata.  Doing this, will probably require modifying many of the tools that are shared by citySchema.org.  So we recommend trying the demonstrations before digging in and modifying the schema. 
    </p>


    <figure class="right">
      <img src="images/filesystem_context.jpg">
      <figcaption>Figure 1: City Model Filesystem Context</figcaption>
    </figure>

    <h2 id="context">Filesystem Context </h2>
    <p>The diagram below illustrates a simple view of the file system context of the model management workspace.  The <b>Bos3dMaster</b> folder holds much of the prepared source material for the city model, including city-wide terran and groundplan information.  These data-sets originate in GIS workflows described elsewhere.  Bos3d_Master is where users and applications reference the currently active 3d model collection. 
    <b>The Bos3dArchive</b> folder is used to preserve information that is not routinely used -- including the source files for 3D models that have been imported, previous versions of the development log, and selected archived snapshots of the 3D model collection. 
    </p>
    <p>The <b>Bos3dDev</b> folder contains workspace folders and source material used for creating and maintaining components of the city model.  The <b>Workflow folders</b> are usually self-contained packages of ArcGIS projects, tools, source data, scratch folders and folders for data that is produced in the workflow.  
    </p><p>
      Workflow folders are backed up by zipping them.  Subsequent management activity might then proceed with a new dated copy of the workflow folder.  When these new generations take place, selected information, such as source files for 3D models or the last published edition of the 3D model collection would be copied to the <b>Bos3d_Archive</b> folder.   
    </p>
 <h3>Local vs Remote Filesystem References</h3>

    All of the resources used for our demonstration project keep all of the resources for a city model are under a single directory.  In your environment, you might have the City3d master folder and the City3D_Dev files on different disks.  For the sake of portability,  our demonstration of the model management tools and procedures will be work with all resources in a single workflow folder. as shown in Figure 2. 
  </p>

<HR>

  <!-- Institvte-->

  <h2 id="tour">Tour of the Model Management Workspace</h2>

  <p>A tour of the Model Collection Mgt workflow folder is useful for orientation to the file organization.  It also introduces the main components of the workflow.  You can watch the tour on youtube (soon) or follow along with your local copy of the workspace available from github (soon).  
  </p>
  
 

  <div class="feature tour">
    <figure class="right">
      <img src="images/model_mgt_files.jpg">
      <figcaption>Figure 2: Model Management Workspace</figcaption>
    </figure>
  <h3>Filesystem and Folders</h3>
  <p>The model management workspace demo is provided as a self-contained workspace with every tool and file accessible via relative path-names. In your environment, it may be beneficial to store multi-purpose resources in other places on your network file-system. 
  </p> 
  <ul>
    <li><b>ArcDocs folder: </b> contains ArcGIS Pro projects where the processing takes place.  There also may be layer files stored here, to save styling of layers and group layers for re-use within the maps and scenes within the project.  Also contans the arcGIS Task files that hold the step-by-step interactive guide for managing your model collection.  

    <li><b>ModelWork folder: </b> contains the source model files for new models that have been submitted for inclusion into the collection.  Or models that are edited during model management operations.  WIthin the ModelWork folder, models are stored in batch folders named according to the source and date.  This organization allows for source models to be referenced in the model catalog and easily retrieved in case anyone wants revisit and modify a model using the original sources.  When a ModlCopllectio_Mgt workflow folder is retired, the contents of ModelWork are copied to the modelWork folder in <b>Cty3D_Archive</b>.
    <li><b>PriorArchive folder:</b> contains the latest archived edition of the Cty3D_Models_YYYYMMDD.gdb.  The date string in the name og the geodatabase reflects the date that the geodatabase was issued a prior ModelCollection_Mgt. The capability to recover from corruption and errors requires that the lineage of PriorArchive models be continuous.  Note that all of the NextEditon modelcollections are spawned from one priorArchive geodatabase.  If you want to start form a newer collection, then the ModelCollection_Mgt workflow folder should be retired, and a fresh one started. 
    <p>
      It is often the case that the next edition of the model collection calls for changes to the table schema for 3D models.  It would take a while to explain why, but for the purposes of maintaining the audit and rollback capability, it is necessary to apply whatever schema changes you intend to make to the prior archived model collection, before you begin making changes.  Therefore, the PriorArchive folder may contain a geodatabase named Cty3D_Models_YYYYMMDD_Migrated.gdb.  
    </p>
    </p><p>The PriorArchive folder contains geodatabases and ArcGIS layer (.lyrx) files that are used to view and inspect the model collection.  
    <li><b>NextEdition folder:</b> is the destination for the new editions of City3D_Model geodatabases.  A single ModeCollection_Mgt workflow folder may spawn several new editions, each one carrying a new date string in its name.  Each new edition also comes with its lyrx files.
    <li></b>Stage folder:</b> contains two geodatabases: <b>Stage.gdb</b> which contains copies of all of the prior_archived feature classes which have had edits made to them.  There is also a newModels_mp feature class that contains all of the new models that have been imported or new models that are the results of edits to models frm the Prior_Archived collection.  Models from the Stage geodatatabase are used to generate the next edition of the model collection.  
    </p><p>
    The <b>config.gdb</b> contains the template multipatch feature class reflecting the latest schema for 3D model feature classes. Tables representing domain values are also stored in config.gdb. 
    <li><b>Sources folder:</b> the sources folder contains parcel information, the latest development log and a terrain raster that covers the extent of the city model.  These datasets are used tp attach attributes to new building models. 
    </p><p>
      In your production environment, these datasets may be referenced form other places.  It is useful tohave copies of them here so that thee is never any doubt about which version of these data-sets have been used. 
    <li><b>Tools folder:</b> ArcGIS tool boxes, FME workbench folders, Python scripts, projection files, and lyrx files used in workflows that wil be discussed below. 
    </p>
    <li><b>Scratch folder:</b> is the destination for all intermediate datasets generated by tools.
    </ul>  
  </div>



<hr>

<h1 id="lifecycle">Lifecycle of a Model Management Workspace</h1>
<p>The citySchema system uses workspace folders to organize tools and data into self-contained packages that may be re-used, modified and archived.  While in use these workspaces provide an environment for re-purposing and customizing tools.  After a preriod of use, a workspace can be zipped and retired to become a frozen container for all of the decisions and procedures that were applied and may be revisited. </p>   
<p>A model management workspace is intended to produce new editions of the model collection that represent updates to the Prior Archived model collection.  In the lifespan of a model management workspace several new editions can be made based on the same Prior Archived collection.  The changes reflected by the Stage feature classes are cumulative. 
Stages in the lifesycle of a model management worspace are depicted in the slideshow, below. 

    <!-- Slideshow container -->
    <div id="moreslides" class="slideshow in-page" 
    data-imgheight = "350px" 
    data-title = "" 
    data-playpaused = "playing" >
    <div class="slidecontainer" data-title="Initialize Prior Archived Collection" data-caption="Away up to tree-line.">
    <div class="slide"><img src="./images/lifecycle_init.jpg" ></div>
    <div class="caption"><p>The workspace folder is initialized by copying the latest archived model collection geodatabase from the Archive folder.  These will remain read-only.</p>
    </div>
    <div class="learnmore">
    </div></div>
    <div class="slidecontainer" data-title="Populate Staging Feature Classes" >
      <div class="slide"> <img src="./images/lifecycle_stage.jpg"></div>
      <div class="caption"><p>After migrating the schema, if necessary, the prior feature classes are copied to the Stage geodatabase, where the records may be modified.</p></div>
      <div class="learnmore"></div>
    </div>
    <div class="slidecontainer" data-title="Stage Changes, Produce New Editions" >
      <div class="slide"> <img src="./images/lifecycle_workflow.jpg"></div>
      <div class="caption"><p>Models may nor be imported and edited, and existing models may have their attributes updated. </p>
      <p>New editions of the collection are formed by sorting the new models and prior archived models according to their new status values. </div>
      <div class="learnmore"></div>
    </div>
    <div class="slidecontainer" data-title="Archive Resources, Retire Workspace" >
      <div class="slide"> <img src="./images/lifecycle_close.jpg"></div>
      <div class="caption"><p>Several new editions may be produced and several new model batches processed in a single model management workspace. At some point, the workspace wil be retired, with the latest edition and the model batches and the workspace itself being archived.  </p></div>
      <div class="learnmore"></div>
    </div>
    </div> <!-- Closes moreslides-->


<hr>

    <h2 id="project">A tour of the ModelMgt ArcGIS Pro Project</h2>
    <p>The ModelMgt_YYYYMMDD.aprx file, located inthe ArcDocs folder is an arcGIS pro project that references the tools and data-sets involved in making changes to the model collection and publishing new editions.  Before digging into the tasks, it will be useful to check the critical preferences settings in this project.  Sometimes ArcGIS initializes these differently when you move or create a new project.
    </p>

    <div class="feature tour">
    <h3>Project Options and Settings</h3>
    <p>In the <b>Project</b> window under <b>Project > Current Settings</b> Notice that we have set the following:
      <li><b>Home Folder</b> is the <b>ModelCollection_Mgt_YYYYMMDD</b> folder that contains all of the resources listed above.  This setting gives you a handy means of jumping tothis folder inorder to find any of the resources in the project. 
      <li><b>Default Geodatabase: </b> set to scratch.gdb in your project's Scratch folder.  If this geodatabase doesn't exist, you should create it. 
      <li><b>Default Toolbox:</b> is modelCollection_Mgt toolbox in your project's tools folder. 
      </ul>
     <p>Under the <b>Project > Options > Geoprocessing</b> settings make sure that the following two options are set asd follows
        <ul>
          <li><b>Checked:</b> Allow geoprocessing tools to overwrite the results of prior geoprocessing operations
          <li><b>Unchecked:</b> Remove layers that reference data overwritten by geoprocessing tools
        </ul>
    </div>

<hr>


<h2>Project Layers, Scenes and Maps</h2>
<p>The ModelMgt project includes one map and one 3D scene.  
<p>
  The layers in the Map table of contents provide an opportunity to discuss some of the important source layers that are used by the model management processes.  As we look through them, set your table of contents to <b>View Source Folders</b> so you can see where these data-sets are stored within the <b>Sources folder</b> of your ModelCollection_Mgt workflow folder. 
</p>

<figure class="middle">
  <img class="scaled" src="images/map_contents.jpg">
  <figcaption>2D Layers Portrayed in the Map Pane</figcaption>
</figure>
<div class="feature tour"> 
<h3>2D Layers</h3>
  <ul>
    <li><b>Dev_Log_Pts: </b> The development log is a table that carries information related to the status of projects under review.  Each agency will have a different variation on this.  In Boston, this table keeps track of the status of each project after each meeting of the review board. It also contains the projectID and the URL for the project on the BostonBuilds web site. There is a lot of other useful information about projects, but those three fields are the ones that are most important for understanding which models may need to be promoted, demoted or superseded.
    <li><b>Issue Points:</b>  used to mark issues such as missing models.  Issues with existingt models are marked on the <b>QA_Issue</b> field on the model's attribute table.
    <li></b>Tile Boundaries and Points:</b> are referenced from the <b>Bos3d_Master</b> repository.  The tile center and corner points have elevations -- necessary for making sure our terrain meshes extend exactly to the corners of each tile. 
    <li><b>Metro_Elevation_5m:</b> Referenced from <b>Bos3d_Master/3D_Data</b> A raster elevation model that covers the full extent of the tiles for our project.  This elevation model is used to calculate the geometric envelope for new models. 
    This elevation model covers the full extent of all tiles. We include a rough elevation model here to keep the demo dataset slim.  In actual production, we use a 1-Foot raster that is derived from our high resolution terrain model within the city and the MassGIS DTM for the outlying areas.  
    <li><b>Parcels 2020:</b> Parcel boundaries are used to add parcel IDs and Assessor map URLs to new building models. When parcel data is updated, you may want to update the assessing links.
    </ul>
  </div>


  
    <h2>The 3D Scene</h2> 
    <p>The 3D scene and its table of contents is the hub of the ModelCollection_Mgt project all of the tools reference layers from the table of contents of this 3D scene. It is also the view upon which all review and edit tasks are carried out. </p>

    <figure class="middle">
      <img class="scaled" src="images/scene_contents.jpg">
      <figcaption>Figure 6: 3D Layers Portrayed in the 3D Scene Pane</figcaption>
    </figure>

    <p>The process of updating city-wide multipatch feature classes is complicated because it is often the case that new models can overlap with old models, and because of time required to draw and re-draw city-wide model collections, you can't simply flick the layers on and off to understand how the models relate to each other.  To help keep the model collection visually sorted the 3D scene makes use of Definition Query Views that use SQL expressions to limit the features displayed.  Views based on definition queries are identified with <b>DQV</b> appended to their names.  
    <p>Views filtered with definition queries are much quicker to flick on and off. Another handy feature of this technique is that multipatch models sort themselves into appropriate views and symbology immediately when their Status attribute is updated.
    </p> 

    <div class="feature tour">
    <h3>3D Layers</h3>
 
    <ul>
      <li><b>Prior Migrated Unfiltered:</b> This group layer includes a layer for each of the multipatch layers that were released with the prior archived model collection.  In cases where schema changes have been made for the current round of updates, these should be the Prior Migrated layers. These make up the initial state of the collection before any changes are made.  These feature classes should be considered read-only.  
        <li><b>Prior Migrated Layer Demo :</b> represents the each of the multipatch feature classes in the prior archived edition, but with styling and definition query views that make it easy to review the collection, toggling proposed-to-built and proposed-to-be-demolished buildings.  Definition query views are identified by including a <b>DQV</b> suffix in their names.
        <p>The styling for these layers was saved when the prior archived model collection was issued.
      <li><b>Stage Unfiltered: </b> portrays each of the feature layers in the Stage.gdb, plus a 3d version of the development log points and issue points portrayed as 3d columns. Any of the multipatch layers in this group layer may be edited except as noted in <a href="#edit_rules"> below.</a>
      <li><b>Stage Edit Views: </b> in the course of making edits, it is useful to use special views, such as: 
         <ul>
           <li>Views of the <b>Proposed_MP</b> and <b>Internal_MP</b> feature classes that are joined to the current Development Log table -- for figuring out whether status promotions may be necessary. 
            <li><b>Definition Query Views</b> (identified by the DQV appended to the layer names) that provide a mechanism for visiting and checking each of the models that had perviously been Under Construction, or might have a status change indicated.  You can inspect these definition queries to see how they work. In the course of making edits, you may encounter reasons to make your own DQV views to facilitate edits.  A cool thing about DQV's based on values of <b>Model Status</b> is that in cases where you are checking and changing values fro Model Status, the models so updated wil automatically jump out of the DQV and into another.
          <ul>
          </ul>
        </div>

<hr>


      <h2 id="tools">Explore Tasks and Tools</h2>
      <figure class="right">
        <img class="scaled" src="./images/tasks.jpg">
        <figcaption>ArcGIS Tasks provide a high -level ordering of procedures</figcaption>
      </figure>
      <p>  There are several procedures involved managing your model collection.  The ModelCollection_Mgt project uses <b>Tasks</b> to break the model management process into a sequence of stages. Click on <b>View > Tasks </b> to explore how the tasks order the steps organized as task groups.  Expand the groups to reveal the individual tasks.  
      </p><p>
      The technical user should <a href="https://pro.arcgis.com/en/pro-app/latest/help/tasks/whatistask.htm" target="arcdoc"> be familiar with how tasks are put together with geoprocessing tools</a>.  While this new feature of ArcGIS pro does make things a little easier, unexpected issues may crop up that require some trouble-shooting skills.
      
      <h3 style="clear: both">Geoprocessing Tools</h3>
      <p>
      Most of the prepared tasks call on geoprocessing tools and models.  To cut down on confusion with 3D models, we are going to call geoprocessing models "tools."  Use <b>View > Catalog </b> Pane to expose the catalog on the right-side of the ArcGIS window.  Expand the toolboxes group and the <b>City3D_ModelMgt.tbx</b> toolbox.  You will notice that the first five tool groups have names that correspond with the task groups.  Expand these and have a look at the various tools. 
      </p>
      <figure class="right">
        <img class="scaled" src="./images/tools.jpg">
        <figcaption>Model Management Toolbox in Catalog Pane</figcaption>
      </figure>
      <p>
        Notice how the individual tools are named with numbers corresponding to the tool group and letters referring tothe general order that they might be used.  Sticking with this convention makes it easier to find the custom tools when confronted with the huge drop-down list that is used in the Task editor.   
      </p><p>Not all tools are associated with tasks.  SOme of them, such as the ones inthe pbcGIS_utils tool group are handy utilities.  And Rumpus contains tools that you might create to preserve one-off procedures that you may want to repeat or re-use. 
      </p>

    
      <h3>ArcGIS Tasks and Geoprocessing Tools are Self-Documenting</h3>
      <p>
      A very handy aspect of the ArcGIS geoprocessing framework is that custom-built tools automate many steps that can be thoroughly understood by examining the tool in <b>Edit</b> mode.   We carry this further by adding graphic labels to the model itself where clarification and further instruction might be useful. 
      With all of this, the tools can be considered self-documenting.  This alleviates the need for a very detailed discussion of the internals of tools in this documentation.    
      </p><p>
      Users should be very familiar with trouble-shooting <a href="https://pro.arcgis.com/en/pro-app/latest/help/analysis/geoprocessing/basics/geoprocessing-quick-tour.htm"target="arcdoc"> ArcGIS Geoprocessing tools</a> and <a href="https://pro.arcgis.com/en/pro-app/latest/help/tasks/whatistask.htm" target="archelp">tasks</a>.  There are many ways that ArcGIS geoprocessing tools can get messed up. This documentation can't cover all of these possibilities.
      </p>
    
      <hr>
 
    <h2>Getting Started: Inspect the Config Data and Establish Reference Schema</h2> 

    <p>The best way to get started with the model management workflow is to start with the demonstration repository on gitHub. <b>Add Link!</b>.  Work through all of the procedures documented here just to see that they all work with the demonstration data provided. Once you are comfortable with the workflow, you can make a copy of the template, remove the geodatabases in the <b>Prior_Archive</b> folder and the <b>Stage/Stage.gdb</b>  
    </p><p>


    <h3>Inspect and Modify ModelMgt_Config Data</h3>
    <figure class="right">
      <img class="scaled" src="./images/config_data.jpg">
      <figcaption>Model Management Config Data</figcaption>
    </figure>
    <p>Before any work is carried out toward the next edition of the model collection, you have an opportunity to modify the schema for models.  The master template for all multipatch feature classes and the tables that establish the coded domain fields for model status and QA Flags are kept in the <b>Stage/ModelMgt_Config.gdb</b>.  If you are going to make changes to any of these, it is critical to make them when you are initializing the workspace.      
      <p>Any changes you want to make to the multipatch feature class schema should be made to the <b>Model_Mgt_Config/Model_Template_MP</b> feature class. As we work through the tools in the first tool group, you will see how changes the domain tables are propagated to all new feature classes.  The tool <b>1a. Create Model Template </b> can be helpful for creating and modifying a new model template based on an existing model feature class. 
    </p>
    <hr>

    <h3>Prepare Prior Archive Feature Classes</h3>
    <p>The geodatabases in the Prior Archive folder provide the read-only base-line reference for the updates and additions that are carried out during the lifecycle of the Model Management workspace.  To assure that all of the changes made to the model collection are traceable and reversable, it is important that the prior archived collection be latest edition created by the previously retired Model Management Workspace. 
      
    <p>If you are making changes to the table schema for multipatches, you should make these changes to each of your prior archived feature classes. The model management workflows require that the schema for each of the model feature classes is exactly the same. You might find it useful to make a copy of the tool, <b>1c. Migrate Prior FCs</b> to make a consistent migration for each of the prior feature classes.  Do not alter the original tool which is used for initializing the stage feature classes based on the working model template.  
    </p>
    <p>If you are beginning a model collection from scratch, it is not necessary to have anything in the Prior_Archive folder. 
    </p> 

    <hr>

    <h2>Initialize the Stage Collection</h2>
    
    <figure class="right">
      <img class="scaled" src="./images/stage_gdb.jpg">
      <figcaption>The Stage Geodatabase</figcaption>
    </figure>
    <p>All of the changes made to the model collection are carried out on the feature classes in the <b>Stage Geodatabase</b>.  This collection is initialized by copying each feature class from the prior archived collection. An additional multipatch feature class is created for <b>New Models</b>.  The Stage.gdb also contains point feature classes representing the Development Tracking Log and <b>Issue Points</b> which are useful for noting issues such as missing models. 
    </p>
  
    <div class="feature tour">


      <h3 id="initialize">Tool Group 1: Initialize the Stage Feature Classes</h3>
      <figure class="right">
        <img class="scaled" src="./images/initialize_tools.jpg">
        <figcaption>Initialize Workspace Tools</figcaption>
      </figure>

      <p>The tools in the <b>1. Initialize</b> tool group 1 and the tasks in the <b>Initialize Model Management Workspace</b> help out with getting your Stage geodatabase up and running. 
      </p>
        <ul>
        <li><b>1a. Create New Model Template</b> is handy for creating a new model template based onthe schema of an existing model feature class. .   
        <li><b>1b. Create Models MP FC</b> is used in several tools and tasks.  This tool takes the model template and creates a new empty feature class for storing new models. At the same time, it makes sure that the target geodatabase has the proper domains for <b>Model Status</b> and <b>QA Flag</b>.   
        <li><b>1c. Migrate Prior FCs</b> uses the <b>Create Models MP FC</b> tool to create a new models feature class and then takes an input model and appends it to the new feature class.  It uses an iterator to do this once for each of the five feature classes.  
        <li> <b>1d. Update Domains</b>.  In case you just want to update the domains in a geodatabase that contains a 3D model multipatch feature class, this tool is for you.  Note that before you run it, you should update the domain tables in the <b>Stage/ModelMgt_Config.gdb</b>.  
        <li><b>1e. Create Issue Points</b>.  The Issue Points feature class is used to flag places where new models need to be made.  This tool wil lcreate a new one.  If the prior archived model collection comes with unresolved issue points, it may be best to copy thses over so that you can address the issues during your model management sessions.
        <li><b> 1e. Initialize Development Log</b>.  The development log is a table that includes a row for each development project and contains the latest status for that project and a URL for the agency's web home page for the project.    It is important that the Project ID be a unique key in this table.  I've included the tool here that I created for the Boston Planning and Development Agency. Each agency wil have its own variation on this.
        </ul>
      </div>

      <div class="feature tour">
      <h3>The Initialize Workspace Tasks</h3>
      <figure class="right">
        <img class="scaled" src="./images/initialize_tasks.jpg">
        <figcaption>Initialize Workspace Tasks</figcaption>
      </figure>
       <p>These tasks are organized to help guide the set-up for a new model management workspace. As discussed above.  
        <ol>
          <li><b>Update Domains:</b> makes use of the Update Domains tool described above.  
          <li><b>Initialize Stage feature classes</b>.  Each time you initialize a model management workspace, each of the prior model feature classes is copied to the stage geodatabase. This uses the <b>1c. Migrate Prior Archived FCs </b> tool, but changes the name of the output worlspace and prepends the string <b>Stage</b> to the name of each to avoid confusion.</a> 
          <li><b>Initialize Stage NewModels FC:</b> The newModels feature class in the Stage geodatabase holds any new model that might be imported or created by editing a pre-existing model.  This task uses the <b>1b. Create Models MP</b> tools to create a new empty feature class for thie purpose using the current model template feature class.
          </ol>
   

      <p>At this point in the workflow, the stage feature classes should reflect all of the models and attributes as they appear in the prior archived collection.  You are now ready to stage changes!  
      </div>

<hr>

       <h2>Staging Changes to the Model Collection</h2>
       <p><b>Staging</b> is a common pattern in computing that provides a way of making and reviewing and potentially rolling back changes before putting a product into production.  While the <b>Editing</b> process for GIS data allows for changes to be rolled back durng an edit session, changes that are staged using the citySchema Model Management workflow are always traceable back to the corresponding records in the reference collection for the life of the model management workspace.  
       </p><p>It is useful to consider four potential categories of changes thatmight be made to models in the collection:</p>
       <ul>
       <li>Add New Models
       <li>Update Model Status Attributes
       <li>Modify Existing Models
       <li>Retire or Remove Models
       </ul>
       <p>The staging workflow allows these changes to be carried out and inspected before a new edition is issued through a process that filters and merges models from the Stage geodatabase into appropriate feature classes in the next edition geodatabase according to the value of each model's (potentially changed) <b>Model Status</b>.  
      <p>None of the changes made to the Stage feature classes involve deletion of features.
      </p>


        <h2 id="import">Import, Inspect and Enroll Models</h2>
        <p>Importng new models is a useful place to begin the discussion of model updates.  It is often the case that new models create the necessity to do things to existing models and their attributes. This workflow has three stages:</P>
          <ol>
            <li> Create a batch folder for preserving the source files for future reference. 
            <li> Import one or more models from original source files into a geodatabase conforming to our schema template.
            <li>Check the models and position or repair as necessary.  Assign identifiers and status attributes. 
            <li>Automatically assign geometric and reference attributes.
            <li>Append the models to the <b>Stage\New_Models_MP</b> feature class.  
          </ol>
         <p>It happens that model batch folders are also used to manage the process of editing / modifying existing multipatch models -- which wil be discussed in another section of this documentation. 
         </p> 


        <h3>Model Batch Folders</h3>
        <figure class="right">
          <img class="scaled" src="./images/model_work.jpg">
          <figcaption>Model sources are stored in Dated ModelBatch folders.</figcaption>
        </figure>
        <p>The citySchema model management scheme preserves original source files for each model imported into the collection.  Subsequently, the metadata for each model includes a means of locating the source model and associated information in the <b>Archive/ModelWork</b> folder. This capability is useful in case a model may need to be edited or if corruption is discovered.  The archiving of source models is arranged through the use of <b>Model Batch Folders</b> that begin their life in the <b>ModelMgt\ModelWork folder</b>.  A model batch folder is named according to the name of the agency, firm or individual that contributed the model. The name of the batch folder includes a date that reflects the approximate date when the models were created or contributed.  It is not necessary that this date be precise, it is merely a means of making the batch folders sortable.  
        </p>
         Model Batch folders are also used for storing and retrieval models and procedural information associated with modifications to models that had previously come frmo the collection.  These situations will be discussed in the section on Model Modification <LINK!>, below. 

        <p>
          When the Model Management workspace is retired, all of the model batch folders are moved to the City3D_Archive folder is the home of all of the source material that has gone into the city-wide 3d model since the beginning. 
        </p>
        <div class="feature funfact">
          <h3>Manuscript Models</h3>
          <p>Tools for authoring 3D models typically provide a hierarchal means of organizing geometry in layers and as nested groups. 3D authoring tools also provide ways of describing curves or other shapes in terms of parameters as opposed to explicit vertices. These mechanisms are different from the table-based organization used by ArcGIS -- in which multipatch objects are stored as single mesh objects that are made of triangle-facets. The hierarchal organization of 3D authoring tools provides a way of managing the complexity of models.  The table-based structure of GIS has advantages in terms of scalability.  When transferring a model from its native 3D editing environment into GIS, best results are obtained when the authoring tool is used to flatten the model into a simple triangulated mesh, which translates directly into a multipatch object.  
          </p><p>
          In cases where a model is available in its original authoring format, the edtitable source document (manuscript) is worth keeping, because the layering and group hierarchy is useful but lost when the model is translated to an exchange format like OBJ format.
          </div>
        
<div class="feature procedure">
<h3>Prepare Model Batch Folder and Geodatabase</h3>
<p>This procedure makes use of the geoprocessing tools in the <b>2. Import ~ Edit Models</b> tool group and the <b>Import Models</b> task group.  
</p> 
<figure class="right">
  <img class="scaled" src="./images/import_tools.jpg">
  <figcaption>Tools for Importing and Enrolling models</figcaption>
</figure>
  <figure class="right">
    <img class="scaled" src="./images/import_tasks.jpg">
    <figcaption>Tasks for Importing and Enrolling Models.</figcaption>
  </figure>
        <ol>
          <li><b>Create a new model batch folder.</b> This is done manually.  The batch name consists of the name of the source and then a date string in the form YYYYMMDD.  The source name could be the name of the contributing firm or individual, the name of a project, or in the case of a batch of edits, it the name might begin with "edits".  These folders wil be created manually using windows explorer.
          
        <li>Create a new batch geodatabase.  This tasks has two steps.  First a new geodatabase is created in the selected Batch Folder.  It should be named "Geodatabse.gdb".  
        <li>Next, the <b>1b. Create Models MP FC</b> tool (previously explained) is called twice to create two new feature classes: 
          <ul>
            <li><b>Prep_MP</b> feature class will receive provisional models for checking and assigning identifiers 
            <li><b>Ready_MP</b> feature class is for the multipatch models that have had all of their attributes assigned. 
            </ul>
        <p>Having these two-stage feature classes is useful in situations where the automatic attribute assignment tool needs to be run more than once.  These feature classes are made according to the latest model template and have all of the latest coded domains for Status and QA_Flag.
        </ul>
      </div>

      <div class="feature procedure">
        <h3 id="inspect">Inspect, Adjust, and Repair Source Models</h3>
        <p>There are many possible workflows one might use for assimilating 3D models depending on the source formatting.  This is an area where experience matters.  For the purposes of keeping this description from running off the rails or getting too deep in the weeds, we will cover the sort of model submission that conforms with the <a href="../submissions/index.htm" target="metadata">citySchema Model Submission Guidelines</a>.  These would be models in simple triangulated OBJ format.
        </p><p>
        Sorry to say, you should always expect problems when importing hand-made models created with design-oriented 3D modeling tools.  Many of these problems wil be difficult or impossible to fix in ArcGIS.  Therefore, it is recommended to begin the model import process by carrying out the following steps using the 3D editing tool of your choice.  In our demonstration we are using SketchUp. 
        </p>
        If you have a contributor who has been properly trained and produces reliable models, you may be able to skip these.
          <ol>
          <il>Copy the original model into the batch folder. You will probably have a sub-folder in the batch that refers to the name of the model file. Since a model batch folder is likely to contain more than one model, you should place each model in a sub-folder named for the model. The model/folder  name ought to say something useful about the project -- like its name perhaps with the project ID appended.   
          <li>Copy whatever source information that you might have -- such as the proponent's slide-deck with plans and elevation drawings --  into the same folder.  You might also include a saved copy of the email that you received with the model -- which contains a lot of very useful contact information. 
          <li>Register the model in the appropriate SketchUp tile.  You may have a stash of these working tiles on your PC somewhere.  It is not necessary to have the entire tiles in your ModelWork folder.
          <li>Check and adjust the X,Y and Z placement and make geometric changes, such as adding a basement to make sure that the model does not have floating corners when displayed on terrain models of varying accuracy.  
        <li>Turn all of the faces (both sides) to white. 
          <li> If your source model contains multiple buildings, cut these apart as necessary into separate modela and group and name them appropriately.  
        <li>Make sure that each model is registered properly with the groundplan and terrain. 
            <li>Export the groups to individual SketchUp components into a folder named <b>skp</b> in your model batch folder. If you are using some other tool for your inspection and clean-up, you may have a different convention. 
          <li>Finally, export each building model as a triangulated OBJ file.  Export into a sub-directory named <b>obj</b> within your batch folder.  
          </ol>
       
      <p>You now have some triangulated OBJ models that are confirmed to be in the correct coordinate system.  </p>
    </div>
      <p>Hopefully your contributors will follow our advice about keeping geolocation information with their models, so that you don;t have to go through a lot of trouble to figure out where the model sits in relation to the detailed groundplan.    
      </p>

  

      <h3>Import, Double-Check and Identify Multipatch Models</h3> 

      <p>The tool, <b>2b. Import Models</b> provides user-settable variables for a bunch of model attributes related to model provenance.  It also takes a list of models.  The tool uses the ArcGIS <b>Import 3D Files</b> tool to import the models.  into the Prep_MP feature class that was created above.  Out tool assumes that the input models are already properly located in the BosMetro 3D coordinate system -- which they will be if you went through the process of <a href="#inspect"> Inspection and Adjustment</a> described above. 
      </p><p>
        We recommend that you initiate the import process with the <b>Import Models</b> task, which provides a handy interface for assigning values for the model batch, model credit, levelof detail and others.  ANy of these values can also be set or modified on a model-by-model basis in the next stage. 
      </p><p>If all goes well, you should now have one or more models in your Prep_MP geodatabase in your model batch folder!  
      </p>
        
      <div class="feature funfact">
        <h3>Problems with Surface Normals</h3> 
        <p>One thing that makes 3D models tricker than flat points, lines, and polygons is the problem of lighting and shading.  Multipatch objects are made of triangulated faces. Your computer needs to figure out which direction each triangle is facing in order to shade it correctly.  The orientation of a face with regard to the light source is known as the <b>Surface Normal</b>.  The term "Normal" in this sense refers to vector perpendicular tothe face.
        </P><p>
         It happens that one of the most common forms of corruption in multipatch models occurs when surface normals for some or all of the faces in a model are pointed inthe wrong direction.  Another way of saying this is that the face or faces are <b>flipped</b> or <b>inside-out</b>
         When this happens faces that appear to be invisible when viewed from one side or the other or faces may appear to be dull -- not reflecting light as they should.  These objects also behave badly when you try to color them with symbology.
        </p><p>
         <b>What is the cause?</b> Multipatch objects do not store surface normal information for eachface explicitly.  Instead, the direction faces are pointing is inferred on the fly by a convention called the <b>Right Hand Rule</b> that says that the vertices of each face are recorded counter-clockwise from the perspective of the lighted side.    With this in mind, it is not difficult to imagine how these inferences might become incorrect.  Especially when a less-then-perfect 3D editing tool is used to create hundreds of new faces by cutting or intersecting complex mesh objects there are situations where the algorithm makes a mistake causing all subsequent faces to be flipped.  This is especially true when the original mesh objects are not validated as closed solids.  
        </p>
      </div>


      <h3>Inspect and Prepare Multipatch Models</h3>
      <p>Once models have been imported into the Prep_MP feature class, they should be inspected again. Some common problems include:  </p>
    <ul>
      <li>Some or all of the faces are in-side out or missing. 
      <li>Some or all of the faces are not pure white.
      </ul>
      <p>Either of these problems will prevent the model from having colors assigned by ArcMap.  The problem with wrong-way faces is a sign of model corruption which will probably prevent the model from being exported correctly. If all of the faces look dull as if they are not reflecting light properly, you may be able to fix the model using a tool in the <b>4a. Fix Normals</b> tool.  This tool uses a City Engin CGA rule to flip all of the faces. So if your problem is that only some of the faces are bad, then you will need to open the model in your favorite editing tool to fix the faces. 
      </p>
      <p>If model faces are anything but pure white on both sides, they will not accept programmatic styles assigned by ArcGIS.  </p>
      <p> If need-be, you can fix the models in your 3D editing tool, and re-import into the same Prep_MP feature class.  Once you have a good version of each model, just delete the bad versions from the Prep_MP feature class before you re-import the repaired model.
        </p>
      There may be some cases where you might want to use the <b>Flip Normals</b> or the <b>Remove Face Materials</b> tools in ArcGIS.  These are discussed below in the section on Modifying Multipatch Models <Link!>, below. 
      </p>
      <div class="feature procedure">
      <h3>Hand-Set Model Identifiers and Status Attributes</h3>
      <p>
      Now there are a few attributes you should set while your new models are in the <b>Prep_MP</b> feature class"
      </p>
      <ul>
        <li><b>Proj_ID:</b> for model tha represent projects that are in the review process, Proj_ID should be populated with the corresponding ID and the Proj_URL from the Development log. 
        <li><b>Model Name</b> Each model should have a name that may reflect the name of the project given by the development log.  Or it might be the name of a landmark buildnig, vanity address or merely the street address for the building. 
        <lI><b>Status</b> should reflect the model status.  Consult the <a href="../model_collection/index.htm#status" target="outboard">Model Status Domain</a>.
        <li>Set the Appear_Dt and Appear_Src to reflect the critical approval or submission dates from the development log. These values should support the validity of the Status.
        <li>Use the <b>3d. Assign Model_ID</b> tool to assign new model IDs to each of the models in the Prep_MP feature class.
        <li>The <b>Model_Batch</b>, <b>Model_File</b> and </b>Model_Date</b> should have been filled in correctly by the model import procedure. 
      </ul>
    </div>
     
      <h3>3e. Assign Geometric and Reference Attributes</h3>
      <p>The next step in enrolling new models is to assign attributes that are calculated based on the model geometry.  This includes assignment of the Parcel ID and Assessor's link, Assignment of the model centroid coordinates and associated links to the oblique imagery in Google Maps and Nearmap; and the Tile ID. 
      </p><p>
        The <b>3e. Assign Geometric Attributes </b> tool takes all of the features in the Prep_MP feature class and assigns the attributes, placing the fully attributed models into the Ready_MP feature class.   
        </p>

        <h3>2d. Append Ready_MP models to NewModels_MP</h3>
        <p>After checking the models in the Ready_MP feature class, it is time to append them to the Stage/NewModels_MP feature class.  Use the task, <b>Append Model Batch to Stage New Models FC</b> to accomplish this. 
        </p>
<p>
        At this point, our Stage.gdb includes several feature classes representing the prior-archived state of the model collection, and a <b>NewModels_MP</b> feature class with several new models. 
      </p>

        <hr>

      <h1 id="stage">Updating the Model Collection</h1>
      <p>Keep in mind that in the life-span of a Model Management workspace folder there may be many batches of new models introduced into the collection.  Each time models are imported, there are several things that need to be checked and it is likely that models that are part of the prior archived collection will need to be updated and perhaps even edited geometrically to complete the updates.  
      </p>
      The process of updating the model collection begins by visiting each of the new models and investigating its  context among the other models in the collection. Information sources such as aerial photos may be consulted, to see if current models may be candidates for promotions or demotions in their status.  During this process you wil discover that pre-existing models may require updates to their <b>Model Status</b> attributes, or may require 3D edits.    
    </p><p>
      ANother stage of the curation project involves looking through the <b>Stage_Proposed_MP</b> and <b>Stage_Internal_MP</b> feature classes to look for models that may be candidates for promotion owing to their advancement through the approval, permitting or construction process.  Models in the Stage_Proposed_MP feature class may have been superseded by newer proposals now represented in the New_Models_MP feature class. Other Prior_Proposed models are likely to need status updates to reflect their advance through the review, permitting process. 
      </p><p>

      <div class="feature funfact">
      <h3>Model Collection Stewardship and Research</h3>
      <p>There are several aspects of managing the model collection that can be thought of as historical research. This is a useful mind-set for understanding the reason and the right sorts of values for the <b>Model Status</b> and <b>Model Provenance</b> attributes.  In the setting of a typical municipal GIS or urban planning department, the business and time investment is oriented predominantly toward the present and future situations.  Care has been taken in the design of the model collection schema and management workflows to streamline the update tasks so that preservation of historical information is a side-product that leaves a priceless historical record with practically no additional work on the part of the curator. 
      </p><p>
      The model collection schema is built to support research.  The process of updating the model to reflect current conditions requires the consultation of reference materials such as aerial photos or the development log, permitting and assessing records, etc.  The automated attribute assignment procedure, described above streamlined access to reference resources such as the latest Google Maps or NearMap and Assessing department viewers. The Appear Date, Dissapear Date Appear Source and Dissapear Source attributes provide a place to record the source documents that confirm these observations.   Proper attribution of this kind is a big time-saver practically speaking.  Reference material must be checked. It is easy to fill in these attributes when the references are at hand.  Recording the facts in the catalog means that the references wil not have to be checked again. 
      </p><p>
      The same model collection schema is useful for pure historical research and development of models of past street-scapes that do not exist anymore.  Over most of the city, we may not have the knowledge and date integrity to be able to zoom back in time with a time-slider.  One difficulty is that we do not know the true appear date for most of the models. Nor do we have models of past structures dating to earlier than 2003.  Nevertheless, the model collection schema would allow an interested person to add historical models and to data to annotate the appear and disappear dates for structures using historical maps.   
      </p>
      <p>Keep in mind that Appear and Disappear dates do not necessarily reflect "year built" or "year demolished". Rather, these attributes reflect the sources that record the date that the structure is first confirmed to exist or to have gone missing. Understanding the source ofthe information provides essential information that may help to articulate and clarify matters when and if new information becomes available.  Most importantly,recording the information when you have it, eliminates the need to check sources again.  
      </div>

      <h3>Understanding the Stage Edit Views and the Status Routing Process</h3>
      <p>As described in more detail in the <a href="../model_collection/index.htm" target="outboard">The Building Model Collection</a>. The geodatabase view of the model collection is segmented into feature classes according to <b>Model Status</b> This segmentation by status streamlines applications that are focused on the current or near-future views of the model collection.   It is important to keep in mind that each of the feature classes has exactly the same attribute schema.  When we look at the collection from the archival asset management viewpoint, all of the status classes are viewed as a single collection (segmented by tile). 
      </p><p>
      The GIS-based segmentation of the collection is useful but requires a little trickery in the development of new editions, since updating the status of a model can cause the model to jump from one feature class to another.  
      Experience has shown that trying to accomplish changes of this kind by copy/pasting multipatch models from one feature class to another is a recipe for disaster -- some of which may not come to light until weeks or months later, whereupon, one has a sickening feeling of wondering how many other models may have failed to copy or paste properly. 
      </p><p>
      The way we avoid this problem is by setting up the Stage feature classes so that any attribute edits including status changes may be made in the Prior_MP feature classes, where they may be reviewed and reconciled.  Deletions of models form the collection are flagged by setting the <b>Model Status</b>  to <b>Retired</b> or by setting the value of <b>QA_Flag</b> to <b>Stop</b> When the next edition is published, the models in the Stage feature classes are routed to their new feature classes using the <b>StatusRouter</b> tool, which will be discussed below. [LINK].
      </p><p>
      <h3>The Stage Edit Views</h3>
      <p>The process of updating the status of models canbe confusing, since it is often the case that new models completely cover previous models.  It is helpful to be able to turn classes of models on and off according to their new status values.  This can be troublesome, because the Active_MP layer takes a long time to draw.  Many hours of trying to work around these awkward problems has led to the development of a set of <a href="https://pro.arcgis.com/en/pro-app/latest/help/mapping/layer-properties/definition-query.htm" target="arcdoc">Definition Query Views</a> that allow for sets features in the Stage feature classes to be quickly turned on and off according to their status values.  The neat thing about this, is that picking a new status for a model causes it to automatically disappear from one definition query view and appear in another.  
      </p>
      <div class="feature tour">
      <h3>Explore the Stage Edit Views</h3>
      <figure class="right">
        <img class="scaled" src="./images/stage_edit_views.jpg">
        <figcaption>The Stage Edit Views Permit the Quick Toggling of Features according to their new Status values.</figcaption>
      </figure>
      <p>The Stage Edit Views have <b>DQV</b> appended to their names so that you don;t forget that their contents are filtered by definition queries.  
      </p><p>
        With practice you will discover how to turn specific layers on and off to expose, for example, the models that have a value of Current or Under Construction from the Active, Proposed or New Models  feature classes.
        This combination of definition query views makes it easy to check the logical consistency of the models involved and to spot models that need to be modified.  When such a model is discovered, its Status might be set to <b>Demolished</b> which wil cause this model to disappear from the view and appear in the <B>Active Demo Candidates DQV</b> view.   
        </p><p>
        To examine new models that have a status of <b>Board Approved</b> or <b>Permitted</b> you may want to leave the <B>Active Stable DQV</b>  turned on turn off the <B>Active Demo Candidates DQV</b> and turn on the <b>Proposed Stable DQV</b>, the and the <b>New Models Proposed DQV</b>, which shoud expose any conflicts between the New Models feature class with models in the Proposed feature class -- that may need to have therir status set to <b>Superseded Proposal</b>.  Adjusting the status this way wil cause the affectedmodel to jump to the <b>Proposed Internal DQV</b>.  
      </p><p>
        When you encounter a model that requires editing for any reason, its <b>QA_Flag</b> should be set to <b>3D_Edit_Candidate</b>, which wil make it jup to one of the DQV layers in the <b>Stop Edit Retired</b> layer group.   
    </p>
      </div>
      <div class="feature funfact">
     <h3>Never Delete Models from the Stage Feature Classes</h3>
     <p>The principle of reversibility for all edits made in this model collection management workflow requires that models not be deleted from any of the Stage feature classes.  To prevent a model from making it to the next edition, you can set its status to <b>Retired</b> which is the normal procedure.  Or for models that are exact duplicates or corrupted, you can set the QA Flag to <b>Stop</b> or <b>3D Edit Candidate</b>  which will cause the model to be ignored by the <b>Status Router</b> tool when the next edition is produced.   
     </p><p>
      The exception to this rule is that you are allowed to delete models from the <b>NewModels_MP</b> feature class. 
     </div>
       



        During the model creation process, 
        The status-based segmentation of the model collection is useful during 


        City-wide multipatch feature classes   



      <h3>Visit each New Model and Update Status of Existing Models</h3>
      <p>It is common that the insertion of a new models into a collection calls for changes to existing models.    

      <h3>Promote Status of Proposed Models</h3>
      <p>After adding new models to the collection, the next phase of model management is checking through the models in the <b>Stage_Proposed_MP</b> feature class and promote value of </b>Model Status</b> according to new information in the development log.  There are some tricks you might apply to make this easier, like joining the development log to the Stage_Proposed_MP feature class and checking for status values that have changed. 
      </p><p>
      Remember that the values of <B>Appear Date</b> and <b>Appear Source</b> attributes should also be updated to reflect the change in status. 
      </p><p> It's possible that new models that you have imported call for changes in status to proposed models.  For example, where a new model supersedes an earlier proposal.



      <h3>Check Proposed Models for Construction / Demolition Activity</h3>

        Notice that Proposed models that have changed their status to <b>Under Construction</b>     
        
        We can now begin the process of checking and updating the values of model status attributes for these models.  To begin with, it is important to have a clear understanding of the purpose for each of the attributes.  So please review the <a href="../model_collection/index.htm#datadictionary">Model Collection Data Dictionary</a>.  
      </p>
      <h3>Overview</h3>
      <ol>
        <li>Understand the <b>Stage Edit Views</b>
        <li>Visit each of the new models.  If you have had more than one batch, it can be helpful to sort the NewModels feature class according to the Record Initialization Date.
        <li>Use your most current reference image, which could be Google Maps, Google Earth or NearMap to see what has been happening in the context of the new model. 
        <li>Update the Model Status attributes to reflect the status of the new model and other models that may be affected by the new project.  While you have the reference material in front of you, update the values Appear Date, Appear Source and Disappear Date and Disappear Source.  For example, 
            <ul>
              <li>For new models that have a status of Approved or Permitted, the Appear Date can reflect the date of the project approval or permission as reflected in the development log. The Appear source should be the development log with its issue date. 
              <li>For existing models that would be affected by approved or permitted  projects, change their status to <b>Approved Demo</b> or <b>Permitted Demo</b>. 
              <p>While you have the most current photography at hand, it is useful to use the <b>Disappear Source</b> attribute to record your observation of whether there is any site work going on, or of the existing structures remain unchanged.   
              <li>It is often the case that models affected by new development may have to be modified since the new project may call for the removal of parts of existing models while leaving other parts intact.  These models should have their <B>QA Flag</b> set to <b>3D Edit Candidate</b>.  These will be dealt with later. 
              <li>If a new model is a new project proposal that supersedes an existing proposal on the same site, the firmer model may have its status changed to <b>Superseded Proposal</b> and the <b>Disappear Date</b> should be the same as the appear date for the new proposal. 
              </uL>
      <li>Notice that when models in the Active feature class have their Model Status values changed to <b>Demolished</b>, <b>Modified</b> or their QA Flag set to <b>3d Edit Candidate</b> or <b>Stop</b>, these models disappear from the <b>Stage Active DQV</b> layer to one of the other definition query views.  This allows you to quickly toggle these alternate views to expose any small models that may otherwise be hidden under other models.  
      </ol>
     <div class="feature procedure">
       <h3>Time-Series Imagery in Google Earth</h3>
       <p>Google Earth is a free tool that includes a deep store of recent and historical aerial imagery. The historical imagery can be viewed by clicking the button shown at number 2 in the image below.</p>
        <figure class="middle"> 
          <img class="scaled" src="images/google_earth.jpg"> 
          <figcaption>Google Earth is a great free research tool.</figcaption>
        </figure>
      <p>You can quickly zoom to a site in Google Earth by copy-pasting the latitude and longitude from the model's attributes into the Google Earth search box as shown at number 1 in the figure, above.  
     </div>

      <h3>Review Models in the Project Pipeline</h3>
      <p>Reviewing the New models results in setting new values for models in the Active, Proposed and Internal feature classes.  But there may be other status changes that are called for as other models move through the review process.  To evaluate these, it is helpful to join development log table with the Active, Proposed and Internal feature classes reflected in the Stage Edit Views.  Select by attribute queries or new definition query views can be created to highlight models that are candidates for promotion or demotion based on the comparison of the value Model Status tothe latest Project Status.  These change candidates should be checked one-by one.  With reference to the most current aerials.  Then the same update procedure as described above, can be carried out. 
      </p>

     <h3>Don't forget to update the edit fields!</h3>
     <p>As described in the data dictionary, the Reord Modification fields are updated automatically by ArcGIS.  These are very useful for traching and sorting recent modifications.  For better or worse, there is no way to stop these fields from being re-set when the model collection is migrated to the next edition.  Yet, it is important for users and managers tobe able to understand the changes that have been made to the models and their attributes.  Therefore, it is up to you to set the values for <b>Editor</b>, <b>Edit Date</b> and <b>Edit Action</b>.  
     </p><p>
      Most of the <b>Edit Actions</b> that happen to the stage feature classes during the staging process can be described as "Updated Status Attributes". The <b>3b. Update Edit Fields</b> tool facilitates updating the Edit fields by letting you select a date/time that reflects the time when you began your staging procedures.  You can fill in your user name and a value for <b>Edit Action</b> and the tool will update the edit fields for each of the five stage feature classes.  This tool uses a clever trick to copy the Record Update time stamp before it gets over-written due to the update of the edit fields.  This means that you are still able toorder the records according to when the update actually happened by using the static <b>Edit Date</b> field.
     </p>

<hr>

      <h1 id="edit">Model Editing Workflows</h1>

      <p>There are several sorts of situations that call for edits to the multipatch models.  
        <ol>
          <li>A model needs to be split to make way for a new building that leaves part of the original model.
          <li>A model may need some sort of geometric repair.
          <li>A Model has a few faces pointed the wrong way. 
          <li>A model has applied materials or textures other than the default plain white required if you wish to change symbology in ArcMap.
          <li>A model has all of its faces pointed the wrong way.
        </ol>
        
      
        <h2>The Model Modification Workflow Scenarios</h2>
        <p>Lets take a look at the example of an existing model that needs to be edited.   If you have a very simple model that you would like to try splitting with the <a href="https://pro.arcgis.com/en/pro-app/latest/help/editing/slice-a-multipatch-feature.htm" target="arcdoc"> ArcGIS Split Multipatch tool</a>, then follow these steps:
        
          <ol>
            <li>Select the model and set its status to <b>Modified</b> and its <b>Disappear Date</b> as concurrent with the appear date of the model that is causing the modification. 
            <li>Use the Append tool to copy the model into to the <b>Prep_MP</b> feature class in your edit batch. 
            <li>Use the ArcGIS 3D editing tools to <a href="https://pro.arcgis.com/en/pro-app/latest/help/editing/modify-a-multipatch-feature.htm" target="arcdoc">Modify</a> or <a href="https://pro.arcgis.com/en/pro-app/latest/help/editing/slice-a-multipatch-feature.htm" target="arcdoc">Split</a> the model in Prep_MP. 
            <li>Follow the procedures for <a href="#import">Importing a model</a>, outlined above.
            </ol>
        <p>I expect that the ArcGIS model editing tools will be improved as time marches on.  At the current writing, the author finds it preferable to use a purpose-built 3D authoring tool for editing 3D models.       
        </p>
        <div class="feature procedure">
          <h3>Edit a Current Model with Your Favorite Authoring Tool</h3>
          Typically, models that need to be modified are in the <b>Active_MP</b> feature class. Therefore these models are reflected in one of the published SketchUp tiles or as an OBJ file in the Repository / Catalog.  Using one of these representations may be the best starting place for editing in your preferred 3D authoring tool. Or you may be able to find the original source model in the folder designated by the model's <b>ModelBatch</b> attribute. In this case, the procedure for editing is identical to the procedure outlined in  <a href="#import">Importing a Model</a>.
      </p><p>
        <ol>
          <li>Update the model's <b>Status</b> to <b>Retired</b> or <b>Reject</b>.
          <li>Set the model's <b>QA_Flag</b> to <b>3D Edit Candidate</b>.  
          <li>Set the model's <b>Edit_Action</b> to reflect the change that is going to be made. 
          <li>Start a model batch folder and geodatabase as described above in the section on <a href="#import">Importing Models</a>
          <li>Find an editable model in the location specified as the original <b>ModelBatch</b>.  Or if the model was previously exported with a Sketchup tile, you might edit it in the context of that tile.
          <li>Follow the instructions for <a href="#import">Importing Models</a>, above to import the edited model.
        </ol>
        <p>Note that all new models recieve new <b>Model_ID</b>s, as this change is how changed models are discovered by applications that are looking to detect updates. 
        </p>
      </div>
        
        <div class="feature funfact">
          <h3>How the <b>Modified</b> Model Status Saves You Time</h3> 
          <p>A common editing workflow comes into play when an existing model needs to be split to accommodate a new model of a proposed structure that will preserve part of the existing one. At the end of the process, you can have a new model that represents the portion if the existing structure that will return to the Active feature class.  And you may also end up with have a second new model that represents the "historical" portion of the original structure that is to be demolished.  As it happens, this process of model editing may be trickier and more time consuming than we would like.  
          </p>
          <p>[Illustration Needed]</p>
          <p> 
          For model curators who are primarily future-oriented, there may not be a clear business case for spending half a day trying to neatly dissect both sides of this complex cutting procedure.  Asit happens, cutting models can be very difficult -- especially when the models do not verify as being fully closed, or "water tight."   
          </p><p>
          In consideration of this fact, we have established the <b>Modified</b> status for models.  The first task is to cut the existing model and to end up with a model that represents the portion that persists.  The original model, in its entirety has its status set to <b>Modified</b>.  This status will cause the entire old model to be shifted to the <b>History_MP</b> feature class.  The new partial model willhave its status set to "Current" and after going through the process of editing and importing through a model batch, it will move through the <b>NewModels_MP</b> feature class and eventually wind up in the <b>Active_MP</b> feature class. 
          </p><p>
            The <b>Disappear Date</b> for modified models should be set to the date when the partial demolition occurs.  For the "Current" portion of the model, the Appear Date should be set to the same date. If you think about how a time-slider will work, you can imagine that when rendering a past scenario, the original, whole, model will be displayed up until that date.  When the slider moves through the curren time, the modified model will disappear and the new model and the remaining portion of the old model will appear. 
            <p>
              It <b><i>is</i></b> confusing that the Appear date of the current portion of the modified model is recent, when the actual structure may be 100 years old.  This is one reason why this Appear Date is not called <b>Year Built</b>.  The original year built for the structure, if it is known could be preserved as the Appear Date on the historical version of the modified model.    
            <p>This situation is an illustration of why the model collection and its attributes is primarily concerned with <b>Models</b> and not with <b>Buildings</b>. 
            </div>




<h2>Automating Batch Edits with ArcGIS Pro </h2>
<p>There are a few use-cases where you can apply geoprocessing tools to accomplish editing Tasks.  Theswe include case where applied textures need to be removed or all of the model's <a href="#normals">surface normals</a> need to be flipped. Or you may want to add basements to a bunch of models to make sure that they extend through the terrain.  The latter case is useful for models whose corners appear to be floating when viewedonlow-resolution terrain models.
For these cases, you can use tools in the <b>4. Export Edit Models</b> tool group. 
</p><p>



       <h3>Finishing your Edits</h3>
       <p>
      In any case, whenever you edit a model, it is important to assign a new Model_ID and enter a short summary of the edit opreration in the <b>Edit_Action</b> field.  These details are necessary for applications that use the Repository Catalog to discover and apply updates to their remote model collections.  
      </p>
      <h3>Edit Tracking Fields for Edited Models</h3>
      <p>The <b>Edit User</b>, <b>Edit Action</b> and <b>Edit Date</b> fields are assigned to new models in the <b>Prep_MP</b> feature class.  When models are imported, these are set by the Import Models tool. The various way of modifying existing models offer many oppoerunities for models to get into <b>Prep_MP</b> through other avenues.  It is therefore necessary to be extra careful to remember set the edit fields when you have the information at hand. 
      </p>

<HR>      
    
    <h1 id="nextedition">Preparing the Next Edition Model Collection</h1>

    <p>The first step in creating the next edition of the model collection involves making a new geodatabase with an empty feature class ready to recieve the new collection.  As discussed under the heading <a href="#lifecycle">Lifecycle of the Model Management Workspace</a>, the <b>NextEdition</b> folder can contain several updated editions of the model collections based off of the same PriorArchived collection. Each of these new editions is distinguished by a YYYYMMDD date stamp that reflects the date that the new edition was initialized.
    </p><p>
    The tool, <b>5a. Initialize Next Edition GDB</b> Prepares a geodatabase with empty feature classes for the five segments of the building model collection.  This tool uses the <b>1b. Create Models MP FC</b> tool tomake sure that each of these uses the current template schema and the Status and QAFlag domains.  The new feature classes also have their automatic tracking fields enabled for RecInitUsr, EecInitDt, RecModUsr and RecModDt are all activated. 


    <h2>Summary Reports, Catching and Fixing Mistakes and Omissions</h2>
    <p>There are many opportunities to make mistakes when updating cartographic material.  It can be helpful to scan the model collection one tile at a time to look for obvious errors.  Our toolkit also provides a means of summarizing the changes by comparing each feature class in the Prior Archived Collection with the corresponding ones in the Stage geodatabase,which yields a summary of changes and potential problems -- such as missing models.  This summary report is saved with the Next Edition geodatabase collection because it provides a quick way for the manager to understand the updates that have been made.  
    </p><p>
      The tool, <b>...</b>
    <p>
      Before publishing the next edition, it is useful to run the summary report and look it over. If the report several logical problems or models that have been accidentally deleted, these problems can be fixed before moving ahead to the final stages of publication. 
    </p> 
    <h3>Check for Bad Status Values</h3>
    <p>The tool, <b>5b. Screen Bad Status</b> is looks at each of the five multipatch feature cklasses in the Stage geodatabase and looks for statuses that are not in our predefined status domain.  The results are tavulated in the <b>Count</b> ovals in the geoprocessing tool. To see these, the tool needs to be run while it is open in Edit view. 
    Theoretically, each count should be zero,provided all new  status values have been set form the pull-down menus.  Nevertheless, it is helpful to check, since any records with an unorthodox Status value will not make it into the next edition collection.  
    </p>
    <h3>Create Summary Audit Report</h3>
    <p>The tool, <b>5c. Create Summary Audit Report</b> compares each of the feature classes in the Stage geodatabase, against the corresponding feature classes in the Prior Archived collection.  For each of these a count is recorded for each combination of Status changes that have been made.  A count is also made for any models that appear to have been accidentally deleted.  Remember that the process of eliminating models is to retire them or set their QA flag to <b>Stop</b> The  edit process forbids deleting models.
    </p><p>
    It is a good idea to review tis summary report / audit log before proceeding to publishing the next edition.  If discrepancies are found, they may be fixed.  Mistakenly deleted models can be added back to the Stage Geodatabase and properly updated if necessary. 
    </p><p>
    The Audit / Summary Report is one thing that managers should look at when they recieve and look over new editions of the model collection that are produced.





      <hr>
      <h2>Publishing the Next Edition Model Collection</h2>
      <p>Publishing the next edition of the Building Model Collection crates several products:
        
        <ul>
          <li>A new Cty3d_Models_YYYYMMDD geodatabase with the date string reflecting the current date.  This geodatabase has the five feature classes, now properly re-sorted according to each model's status. 
          <li>An audit report is created, which compares the five Stage feature classes with the Prior Archived versions.  This summary provides counts for the various staus changes and retired or stopped models.  This summary also includes a count of models that may have accidentally been deleted from the Stage featutre classes -- which shold not happen
          <li>The NewModels feature class is summarized with counts for the values Edit Action.  
          <li>The new model collection geodatabase also includes a polygon feature class reflecting the footprints for the models in the <b>Active_MP</b> feature class. 
          <li>A new model catalog in CSV and JSON format.  This index is part of the <a href="../repocat/index.htm" target="outboard">Repository Catalog System</a>.  It can be used by applications for detecting changes.
          <li>New group layers for visualizing and checking the model collection.
        </ul>






        <h3>The Status Router Tool</h3>
        <p>The heart of the process for migrating the stage feature classes to the next edition is a tool named <b>5.c. StatusRouter</b>.  This tool uses an iterator function that brings up each of the six multipatch feature classes in the Stage geodatabase.  This includes the usual five plus the NewModels_MP feature class.  
        </p><p>
        For each feature class, a sequence of selections is made to route multipatch feature to the appropriate destination feature class according to the value of the model's Status. For each iteration of the tool, one of the feature classes in Stage.gdb is subjected to five SQL queries corresponding to the Status Classes described in the <a href="../model_collection/index.htm#status">Status Class Dictionary</a>
        </p>


        <hr>

        <h3>The Stage Phase and Edit Rules</h3>
    <p>The Model Management workspace has three chambers: <b>Prior Archived</b>, <b>Stage</b> and <b>Next Edition</b>.  
    </p>
    <p> In the <b>Prior Edition folder</b> only one sort of editing takes place.  That would be to add, remove or rename or re-order fields in the model table schema.  If this sort of migration is done, it would happen at the initiation of the workspace.  Each of the feature classes is migrated exactly the same way. 
    </p>
    <p>In the <b>Next_Edition folder </b> none of the feature classes would ever be edited. Though it may be tempting to make small corrections here, todo so means that the changes wil be lost when a future edition is produced by processing the feature classes in the Stage geodatabase.
    </p><p>
    In the <b>Stage Geodatabase</b>, the attributes of models may be updated in any of the feature classes.  No multipatch features are ever deleted.  To prevent a model from going to the next edition, it would have its Status changed to "Retired."  Or if its a model that represents a structure that is demolished or modified, it would have its Status set accordingly.  
    </p><p>
    New and edited models are always brought in through a Batch folder within the MOdel_Work folder.  After being fully checked, geometrically, and having their IDs and other attributes properly assigned, new models are introduced to the Stage geodatabase by appending them to the <b>New_Models_MP</b> feature class.  Models produced by editing prior-archived models get a new Model_ID assigned, even if the change only involved flipping some faces.  The new ID is how model changes and updates are detected throught the model catalog. 
    </p>
    
    
    <hr>

</div> <!-- Closes #article div -->

    <div id="footer"> <!-- Content provided by cityschema_includes.js--> </div> 
  </div> <!-- Closes main container--> 
</div> <!-- closes grid container-->
</body>
</html>
    