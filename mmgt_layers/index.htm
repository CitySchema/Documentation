
<!doctype html>
<html lang="en">
<!-- Hi Folks, this is the template file for pages in the citySchema.org documentation library -->
<head>
    <title>Layers, Popups and WebScenes</title>
    <meta name="description" content="Covers procedures for producing and publishing Layers with custom pop-ups. ">
    <meta name="keywords" content="City Modeling, Digital Humanities, Geography, citySchema">
    <meta name="author" content="Paul B. Cote">
    
<!-- don't edit between here and the Article div.  -->
    <link rel="icon" href="../resources/images/favicon.png" type="image/x-icon">
    <script src="../resources/jquery/jquery-3.6.0.min.js"></script>
    <link href="../resources/docutree.css" rel="stylesheet"> 
    <script src="../resources/slideshow_pbc.js"></script>
    <link href="../resources/slideshow_pbc.css" rel="stylesheet"> 

    <!-- The index sidebar and all content other than the main article coe form the cityschema_includes.js.
          When you add a new page or internalachcor, you should update the index in cityschema_includes.js.-->
    <script src="../resources/cityschema_includes.js"></script>
    <!-- THis has to come after the cityschema_includes file-->
    <script src="../resources/docutree.js"></script>
</head>
<body>
    <div id="grid-container">
      <div id="index-container">
         <div id="index-header"> <!-- Content provided by cityschema_includes.js--> </div>
         <div id="index">        <!-- Content provided by cityschema_includes.js--> </div>
         <div id="index-footer"> <!-- Content provided by cityschema_includes.js--> </div>
      </div> 
      <div id="main-container">
        <div id="header"> <!-- Content provided by cityschema_includes.js--> </div>

<!-- Page content goes inside the article div -->
<div id="article">
  <h3 class="section_title"></h3>  <!-- Optional: would be the tile of the intro chapter. -->
    <h1 class="title">Layers and Pop-Ups and Web Scenes</h1>

<p><i>This page is under construction</i>

<p>Before reading this, it may be helpful to review the <a href="../mmgt_project/index.htm#layers">Managing Re-Useable Layers and Styles</a> documentation on re-usable layers and the master shade library which is part of the Tour of the Model Management Workspace.

<p>Visually presenting and sorting subsets of the building model collection is a necessary aspect of most applications of the city model within ArcGIS, public web-scenes and through ArcGIS Urban applications. The citySchema Model Management workspace provides a style palette for coloring models according to status that provides a familiar, intuitive legend for quickly understanding the status of building models.  This pallette is used for every visualization of building models on all platforms.
<ul>
  <li><a href="https://boston.maps.arcgis.com/home/webscene/viewer.html?webscene=80de5aea1a3348bfae7ae4c91659a75e" target="agol">Visit the public web-scene demo</a> 
  <li>Note the way that the Radio buttons work and how the legend does not contain a lot of excess values.
</ul>

  <p>
  Because ArcGIS Pro and ArcGIS on-line do not have a means of eliminating un-used classes from legends, it has been necessary  to create variations of the master template layer to produce web-scenes with <b>streamlined feature selections and legends</b> that do not contain lots of distracting un-used status classes.

<b>Pop-Ups</b> are another aspect of styling that requires simplification. Currently, there seems to be a lot of room for improvement in the way that ArcGIS Pro and ArcGIS OnLine's simple web scene builder handle custom pop-ups (as far as I can tell).  I expect that (hopefully) some of the headaches with styling pop-ups that are portrayed in this workflow, will be obsolete before too long. 
</p>

<h2>Workflow and Resources for  Selecting, Styling and Publishing AGOL Feature Layers</h2>
<p>It is probably best to have the tool: <b>6a2. Publish Public Scene Layers</b> and the related task open when reading this documentation.

<p>The essential workflow boils down to this:
  <h3>In ArcGIS Pro</h3>
  <ol>
    <li>Copy features and suppress the auto-update fields, which are incompatible with the publish scene layer tool. 
    <li>Apply feature styling and pop-ups from a template layer file saved previously in <b>ArcDocs/Layers</b>.
    <li>Publish the scene layers to the the user's chosen staging folder on ArcGIS On-Line
    </ol>
  <h3>In ArcGIS On-line</h3>
  <ol>
    <li>Replace the currently published scene layers in a AGOL "folder" dedicated for the live scene layers for the public web scene.
    <li>Check the layer behavior and pop-up content.
    </ol>
    
  <h2>Customizing Popup and Layer Styling</h2>
  <p>Quick notes and links to be filled in later:
    <ul>
      <li>Examine the layer <b>ArcGIS On-Line Public Layers/Bos3d_Existing</b> 
      <li>Note how the multipatch styling comes from the saved Bos3d_Status style-set.  Read about <a href="https://pro.arcgis.com/en/pro-app/latest/help/projects/styles.htm" target="arcdocs">Styles</a>
      <li>Right-click and choose <b>Configure Pop-Up</b>
      <li>The most effective way to style pop-ups with hyperlinks that are based on attribute values, as we do in our demo requires you to edit the pop-up template in HTML mode. 
      <li>Read more about <a href="https://pro.arcgis.com/en/pro-app/latest/help/mapping/navigation/configure-pop-ups.htm" target=""arcdocs">Configure Pop-Ups</a>
      </ul>
<p>This mechanism for styling pop-ups is clunky.   But reliable.


<h2>Saving and Re-Using Layers wth various styling and Pop-Up Options</h2>
  <p>All styling and pop-up customizations are saved with a layer when you right-click and choose <b>Save as Layer File</b> on a layer.
  <p>These options can be applied to a layer using the <a herf="https://pro.arcgis.com/en/pro-app/2.9/tool-reference/data-management/apply-symbology-from-layer.htm" target=""arcdocs">Apply Symbology from Layer</a> 
    





</div> <!-- Closes #article div -->

    <div id="footer"> <!-- Content provided by cityschema_includes.js--> </div> 
  </div> <!-- Closes main container--> 
</div> <!-- closes grid container-->
</body>
</html>
    