
<!doctype html>
<html lang="en">
<!-- Hi Folks, this is the template file for pages in the citySchema.org documentation library -->
<head>
    <title>Model Collection Management Project and Workspace</title>
    <meta name="description" content="Covers the procedures formanaging a collection of 3D building models as part od a GIS-based city modeling project.  Par of the citySchema.org framework foo developing, sharing and preserving city model assets. ">
    <meta name="keywords" content="City Modeling, Digital Humanities, Geography, citySchema">
    <meta name="author" content="Paul B. Cote">
    
<!-- don't edit between here and the Article div.  -->
    <link rel="icon" href="../resources/images/favicon.png" type="image/x-icon">
    <script src="../resources/jquery/jquery-3.6.0.min.js"></script>
    <link href="../resources/cityschema.css" rel="stylesheet"> 
    <script src="../resources/slideshow_pbc.js"></script>
    <link href="../resources/slideshow_pbc.css" rel="stylesheet"> 

    <!-- The index sidebar and all content other than the main article coe from the cityschema_includes.js.
          When you add a new page or internalachcor, you should update the index in cityschema_includes.js.-->
    <script src="../resources/cityschema_includes.js"></script>
    <!-- THis has to come after the cityschema_includes file-->
    <script src="../resources/cityschema.js"></script>
</head>
<body>
    <div id="grid-container">
      <div id="index-container">
         <div id="index-header"> <!-- Content provided by cityschema_includes.js--> </div>
         <div id="index">        <!-- Content provided by cityschema_includes.js--> </div>
         <div id="index-footer"> <!-- Content provided by cityschema_includes.js--> </div>
      </div> 
      <div id="main-container">
        <div id="header"> <!-- Content provided by cityschema_includes.js--> </div>

<!-- Page content goes inside the article div -->
<div id="article">
  <h3 class="section_title"></h3>  <!-- Optional: would be the tile of the intro chapter. -->
    <h1 class="title">Model Collection Management Project and Workspace</h1>
  

    <p>The collection of 3D building models is the most actively developed and maintained component of the city model. Simple models can be made by extruding building roof-prints, but the best looking models, more accurate models are contributed by designers or photogrammetry specialists.  These models originate outside the world of GIS, and therefore are associated with a lineage of source files and procedures.  The model collection is discussed in depth on the page <a href="../model_collection/index.htm">The Building Model Collection</a>.
    <p>
    As the model collection moves through time, there are many files and procedures to keep track of!  Ideally, we would have a few easy-to-understand principles and patterns for file management that permit any model collection curator to add new models, to promote and demote existing models in such a way that the every decision and resource in the lineage of any model can be re-traced and if need-be, undone.   The file management schema should be scalable in such a way that itdoes not become more complicated as the model grows in terms of numbers or spatial extent. Whan managed accrding to these principles, the model collection will serve as a clear memory of the history of the places that have been measured, or dreamed up over the life-span of the model. 
    <p>
    
    The purpose of this page is to try to explain these simple principles and patterns in hopes that the user will be able to apply them in almost any model management situation.  Properly applied, this system should allow any other model curator who  understands these principles to pick up the model curation task exactly where the former curator left off. 
    </p><p> 
    The workflow and tools described on this page can be demonstrated and forked for local customizations using the <a href="http://github.com/CitySchema/ModelMgt" target="github">Model Management GitHub repository</a>.  We start with the ArcGIS Pro workflow because our municipal GIS managers tend to have licenses for this tool-kit.  The ArcGIS model for representing 3D geometry as geographic features is well suited to the task. We anticipate that the concepts and procedures described here may be implemented on other platforms with completely interoperable results. 
    </p> 
    <h3>Table of Contents</h3>
    <ol>
      <li><a href="#roles">Enterprise and Technical Viewpoints</a>
      <li><a href="#foundation">Foundation Concepts and Data Dictionary</a>
      <li><a href="#context">Filesystem Context </a>
      <li><a href="#tour">Tour of the Model Management Workspace Folder: Data Management</a>
      <li><a href="#lifecycle">Lifecycle of a Model Management Workspace</a>
      <li><a href="#project">Tour of the ArcGIS Pro Project: Properties, Layers and Views</a>
      
      </ol>
<HR>
    <h2 id="roles">Enterprise and Technical Viewpoints</h2>
    <p>Before digging into the technical details of <b>How</b> to manage a city-wide collection of 3D models, it will be useful to have a picture of the sorts of people for whom this scheme has been designed, and the personal and institutional <b>motivations</b> that make this effort worthwhile.  
</p><p>
    The <b>Technical User</b> is the sort of person who carries out edits and other data management tasks regarding geographic data in a municipality.  This is a person who knows how to use 3D modeling tools and has experience with the issues that come up when working with 3D models in various formats.  The technical user also has an understanding of GIS, relational database fundamentals and basic programming with ArcGIS model builder.  Basic programming with python and javascript is useful, as well.
  </p><p>
    
    The <b>IT Manager</b> is accountable for taking care of the institution's information.  This role involves hiring and evaluating the work of technical users who may be employees or contractors.   For the IT manager, a successful architecture results in a collection of assets that is sustainable without dependencies on particular individuals holding the position of technician or manager. For the IT manager, it will be useful to understand the essential pieces of the city model, where they are stored, and the sorts of problems that are likely to occur -- including the possibility that the digital assets associated with the city model may need to be migrated from one software platform to another.
  </p>
  <!-- h3>Special Problems of Managing 3D Models in GIS</h3>
  <p>
    <b>Managing a collection of 3D models is different from managing traditional two-dimensional GIS data.</b> Points, Lines and Polygons are easy to visually inspect and to repair with a few strokes of the cursor.  Rules of 2D topology can be evaluated automatically.  Problems that occur with GIS-based 3D model collections may be more difficult to discover.  There are many data-sets involved, including historical models, alternative models, superseded proposals, retired models, etc, which are rarely looked at.  3D models are tricky to repair and replace -- particularly if the original source files are no longer available.  When a 3D model is corrupt, the effect is sometimes invisible in one context, such as the desktop GIS application, but becomes evident when the model is translated to another format.  it is often the case that problems such as lost or corrupted models are not discovered for weeks, and when they are, it can be difficult to trace the problem or to know how many other models may have been affected.  
  </p><p>
    The special problems of managing temporally and geographically extended collections of 3d models are the reason for the special pains taken in designing the model management workflow to safeguard against accidental data loss, to maintain an audit trail for all changes,  to assure a roll-back capability, and to keep track of source data.  
    </p><p>
    Managers and technicians should each read this documentation to understand that there is a place for storing and finding every piece of the city model.  This will relieve the technician from having to make thousands of new decisions, save the cost of learning from unsuccessful ones.  This understanding, along with periodic quality checks will assure the IT manager that the information resources are recoverable even after the technician moves on to other jobs. 
    </p>
  

<HR -->

    <h2 id="foundation">Foundation Concepts</h2>

    <p>For model curators, it is essential to understand the conceptual overview of the model collection, including definitions of important terms and a data dictionary issued in the document: <a href="../model_collection/index.htm" target="outboard">Overview of Building Model Collection and Catalog</a>.  It is particularly important to understand the <a href="../model_collection/index.htm#datadictionary" target="datadict">Data Dictionary</a> with all of the meanings and values expected for each of the model attributes.</p> 
    </p><p>
    The Building model collection is the most intensively managed component of the city-wide 3D model. This workflow prepares the model collection to become one of the components of the <a href="../repocat/index.htm" target = "outboard">citySchema Repository Catalog</a> publishing and archiving strategy.
    </p>    

<h2 id="context">File System Context</h2>
<p>The citySchema architecture makes use of a modular file-system that has evolved over time to provide a scheme for storing assets that does not grow more complicated as the number of assets or their spatial or temporal extent grows.  The file system facilitates sharing and syncing of assets between in-house and off-site installations where parts of the city model may be worked on.   The demonstration version of the ModelMgt workspace is self-contained so it canbe explored without setting up an elaborate context of source folders.  To see how this workflow would be set up in a production environment, visit <a href="../filesystem/index.htm" target="outboard"> citySchema Modular File System</a> to learn more about the recommended filesystem context for the ModelMgt workspace.


<h3 id="tour">Tour of the Model Management Workspace</h3>
<p>A tour of the ModelMgt workflow folder is useful for orientation to the file organization.  It also introduces the main components of the workflow.  You can watch the tour on youtube (soon) or follow along with your local copy of the workspace <a href="http://github.com/CitySchema/ModelMgt" target="github">available on github</a>.  
</p>

  <div class="feature tour">
  <h3>Filesystem and Folders</h3>
    <figure class="right">
      <img src="images/model_mgt_files.jpg">
      <figcaption>Model Management Workspace</figcaption>
    </figure>
 
  <ul>
    <li><b>ArcDocs folder: </b> contains ArcGIS Pro projects where the processing takes place.  Layer files are also stored here, to save styling of layers and group layers for re-use within the maps and scenes within the project.  Also contains the ArcGIS Task files that hold the step-by-step interactive guide for managing your model collection.  

    <li><b>ModelWork folder: </b> contains the source files for new models that have been submitted for inclusion into the collection.  New models that are the result of edits to previously existing models are also stored in the ModelWork folder.  Models are organized in batch folders named according to the source and date.  This organization allows for the locations of source models to be referenced in the model catalog and easily retrieved in case anyone wants re-visit and modify a model using the original sources.  When a ModelMgt workflow folder is retired, the model batch folders are copied to the <b>Cty3D_Archive</b> folder.
    <li><b>PriorArchive folder:</b> contains the latest archived edition of the Cty3D_Models_YYYYMMDD.gdb.  The date string in the name of the geodatabase reflects the date that the collection was issued from a previously retired ModelMgt workflow. 
    </p><p>The capability to recover from corruption and errors requires that the lineage of PriorArchive models be continuous from one ModelMgt workflow to the next.  This means that edits to the collection that are made outside of a modelMgt workflow may be unrecoverable later.
    </p>
    <!--p>
      It is often the case that the next edition of the model collection calls for changes to the table schema for 3D models.  It would take a while to explain why, but for the purposes of maintaining the audit and rollback capability, it is necessary to apply whatever schema changes you intend to make to the prior archived model collection, before you begin making changes.  Therefore, the PriorArchive folder may contain a geodatabase named Cty3D_Models_YYYYMMDD_Migrated.gdb.  
    </p -->
    </p><p>The PriorArchive folder contains geodatabases and ArcGIS layer (.lyrx) files that are used to view and inspect the model collection.  
    <li><b>NextEdition folder:</b> is the destination for the new editions of City3D_Model geodatabases.  A single ModelMgt workflow folder may spawn several new editions, each one carrying a new date string in its name.  Each new edition also comes with its lyrx files.
    <li><b>Stage folder:</b> contains two geodatabases: <b>Stage.gdb</b> which contains copies of all of the prior_archived feature classes which are used for making updates to the Model Status attributes andserve as the source for edits.  There is also a Stage_NewModels_MP feature class that contains all of the new models that have been imported or new models that are the results of edits to models frm the Prior_Archived collection.  Models from the Stage geodatatabase are used to generate the next edition of the model collection.  Each of the feature classes in the Stage.gdb have <b>Stage_</b> pre-ended to their name.  
    </p><p>
    The <b>Stage\Config.gdb</b> contains the template multipatch feature class reflecting the latest schema for 3D model feature classes. Tables representing domain values are also stored in config.gdb. 
    <li><b>Sources folder:</b> the sources folder contains parcel information, the latest development log and a terrain raster that covers the extent of the city model.  These datasets are used tp attach attributes to new building models. 
    </p><p>
      In your production environment, these source datasets may be referenced from other places -- most likely fro within the <b>Bos3d_Master</b> folder  
    <li><b>Tools folder:</b> ArcGIS tool boxes, FME workbench folders, Python scripts, projection files, and lyrx files used in workflows that will be discussed below. 
    </p>
    <li><b>Scratch folder:</b> is the destination for all intermediate datasets generated by tools.  The <b>Scratch\Scratch.gdb</b> is the default workspace for the ArcGIS Pro project -- the destination for all tool outputs that are not otherwise specified. 
    <li><b>Tools folder:</b> is the location for the default ArcGIS toolbox, <b>ModelMgt.tbx</b> and other resources used by tools including Python scripts, FME workbench files, and projection files.
    </ul>  
  </div>

<hr>

<h1 id="lifecycle">Lifecycle of a Model Management Workspace</h1>
<p>The citySchema system uses workspace folders to organize tools and data into self-contained packages that may be re-used, modified and archived.  While in use these workspaces provide an environment for re-purposing and customizing tools.  After a period of use, a workspace can be zipped and retired to become a frozen archive that preserves all of the decisions and procedures that have been applied. </p>   
<p>A model management workspace is intended to produce new editions of the model collection that represent updates to the Prior Archived model collection.  In the lifespan of a model management workspace several new editions can be made based on the same Prior Archived collection.  The changes carried out on the Stage feature classes are cumulative. 
Stages in the lifecycle of a model management workspace are depicted in the slideshow, below. 

    <!-- Slideshow container -->
    <div id="moreslides" class="slideshow in-page" 
    data-imgheight = "350px" 
    data-title = "" 
    data-playpaused = "playing" >
    <div class="slidecontainer" data-title="Initialize Prior Archived Collection" data-caption="Away up to tree-line.">
    <div class="slide"><img src="./images/lifecycle_init.jpg" ></div>
    <div class="caption"><p>The workspace folder is initialized by copying the latest archived model collection geodatabase from the Archive folder.  These will remain read-only.</p>
    </div>
    <div class="learnmore">
    </div></div>
    <div class="slidecontainer" data-title="Populate Staging Feature Classes" >
      <div class="slide"> <img src="./images/lifecycle_stage.jpg"></div>
      <div class="caption"><p>After migrating the schema, if necessary, the prior feature classes are copied to the Stage geodatabase, where the records may be modified.</p></div>
      <div class="learnmore"></div>
    </div>
    <div class="slidecontainer" data-title="Stage Changes, Produce New Editions" >
      <div class="slide"> <img src="./images/lifecycle_workflow.jpg"></div>
      <div class="caption"><p>Models may nor be imported and edited, and existing models may have their attributes updated. </p>
      <p>New editions of the collection are formed by sorting the new models and prior archived models according to their new status values. </div>
      <div class="learnmore"></div>
    </div>
    <div class="slidecontainer" data-title="Archive Resources, Retire Workspace" >
      <div class="slide"> <img src="./images/lifecycle_close.jpg"></div>
      <div class="caption"><p>Several new editions may be produced and several new model batches processed in a single model management workspace. At some point, the workspace wil be retired, with the latest edition and the model batches and the workspace itself being archived.  </p></div>
      <div class="learnmore"></div>
    </div>
    </div> <!-- Closes moreslides-->


<hr>

    <h2 id="project">A tour of the ModelMgt ArcGIS Pro Project</h2>
    <p>To get the most out of this tour, you should download a copy of the <a href="http://github.com/CitySchema/ModelMgt" target="github">ModelMgt repository from GitHub</a> and explore the file-system and ArcGIS Pro Project while looking at this tutorial.
    </p>
    <p>The ModelMgt.aprx file, located in the ArcDocs folder is an arcGIS pro project that references the tools and data-sets involved in making changes to the model collection and publishing new editions.  Before digging into the tasks, it will be useful to check the critical preferences settings in this project.  Sometimes ArcGIS initializes these differently when you move or create a new project.
    </p>

    <div class="feature tour">
    <h3>Project Options and Settings</h3>
    <p>In the <b>Project</b> window under <b>Project > Current Settings</b> Notice that we have set the following:
      <li><b>Home Folder</b> is the <b>ModelCollection_Mgt_YYYYMMDD</b> folder that contains all of the resources listed above.  This setting gives you a handy means of jumping to this folder inorder to find any of the resources in the project. 
      <li><b>Default Geodatabase: </b> set to scratch.gdb in your project's Scratch folder.  If this geodatabase doesn't exist, you should create it. 
      <li><b>Default Toolbox:</b> is modelCollection_Mgt toolbox in your project's tools folder. 
      </ul>
     <p>Under the <b>Project > Options > Geoprocessing</b> settings make sure that the following two options are set asd follows
        <ul>
          <li><b>Checked:</b> Allow geoprocessing tools to overwrite the results of prior geoprocessing operations
          <li><b>Unchecked:</b> Remove layers that reference data overwritten by geoprocessing tools
        </ul>

    <h3>Geoprocessing Environment Settings</h3>
    <p>THe following geoprocessing environment settings shold be checked each time you begin using a new copy of the ModelMgt workflow project:
      <ul>
        <li><b>Coordinate System:</b> Massachusetts State Plane Mainland Zone (U.S. Feet) FIPS 2001.  
          <br><b>Vertical Datum:</b> NAVD88 U.S. Feet (Height) 
        <li><b>Current Workspace:</b> Scratch\Scratch.gdb
        <li><b>Scratch Workspace:</b> Scratch\Scratch.gdb
      </ul>
    </div>

<hr>


<h2>Project Layers, Scenes and Maps</h2>
<p>The ModelMgt project includes one map and one 3D scene.  
<p>
  The layers in the Map table of contents provide an opportunity to discuss some of the important source layers that are used by the model management processes.  As we look through them, set your table of contents to <b>View Source Folders</b> so you can see where these data-sets are stored within the <b>Sources folder</b> of your ModelCollection_Mgt workflow folder. 
</p>


<div class="feature tour"> 
<h3>2D Layers</h3>
<figure class="middle">
  <img  src="images/map_contents.jpg">
  <figcaption>2D Layers Portrayed in the Map Pane</figcaption>
</figure>
<p>While we are looking at the layers in the 2D map, you ought to explore theier attributes and properties in the ArcGIS project. </p>
  <ul>
    <li><b>Dev_Log_Pts: </b> The development log is a table that carries information related to the status of projects under review.  Each agency will have a different variation on this.  In Boston, this table keeps track of the status of each project after each meeting of the review board. It also contains the projectID and the URL for the project on the BostonBuilds web site. There is a lot of other useful information about projects, but those three fields are the ones that are most important for understanding which models may need to be promoted, demoted or superseded.
    <li><b>Issue Points:</b>  used to mark issues such as missing models.  Issues with existingt models are marked on the <b>QA_Issue</b> field on the model's attribute table.
    <li></b>Tile Boundaries and Points:</b> are referenced from the <b>Bos3d_Master</b> repository.  The tile center and corner points have elevations -- necessary for making sure our terrain meshes extend exactly to the corners of each tile. 
    <li><b>DEM_3ft_Square_Clip:</b> A raster elevation model clipped for our demo project.  This elevation model is used to check the vertical placement of models and to calculate the geometric envelope for new models.  In a production environment, this 
    elevation model would be a 1-foot resolution raster coverng the full extent of the tile scheme.
    <li><b>Parcels 2020:</b> Parcel boundaries are used to add parcel IDs and Assessor map URLs to new building models. When parcel data is updated, you may want to update the assessing links.
    <li><b>Groundplan Tiles and Ortho Tiles</b> These are the tiled images that were produced for the tiled downloads.  They are provided with the demo data-set for reference.  
    </ul>
  </div>

  <div class="feature funfact">
    <h3>About Re-usable Layers</h3>
    <p>All of the layers for viewing 3d models use the same symbolization for models according to status.  The master layer for this symbology can be found in the <b>ArcDocs\Layers\MP_Status.lyrx</b> file.  This symbology can be applied to any multipatch layer using the <b>Appearance\Import function </b> as described in <a href="https://pro.arcgis.com/en/pro-app/2.7/help/mapping/layer-properties/import-symbology-from-another-layer.htm" target="arcdoc">ImportSymbology from another Layer</a>.
   <p>Any time you change the treatment of the status symbology, it would be a good idea to re-save this master layer. 
     <p>Many group layers are also saved in the layers folder.  It is a good habit to save any of the major group layers to this location any time you make changes to them.
    <p>The project option  <b>Geoprocessing > Remove Layers that are overwritten by geoprocessing tools</b> should always be un-checked.  Unfortunately this is not the default, and even un-sets itself when a project is copied. As a result, the symbology for layers will get wiped out when geoprocessing tools delete and re-generate data-sets.  You will learn this the hard way many times but be happy that the prior state of these layers and group layers can be recovered. 
    <p><i><b>Note to ESRI:</b></i> it would be great if there was a way for layers to reference the symbology from a saved layer and update themselves automatically. 
    </div>

   
    <div class="feature funfact">
    <h3>About Definition Query View Layers (DQV)</h3>
    <p>The process of updating city-wide multipatch feature classes is complicated because it is often the case that new models can overlap with old models, and because of time required to draw and re-draw city-wide model collections, you can't quickly flick the city-wide model layers on and off to understand how the models relate to each other.  To help keep the model collection visually sorted the 3D scene makes use of Definition Query Views that use SQL expressions to limit the features displayed.  Views based on definition queries are identified with <b>DQV</b> appended to their names.  
    <p>Views filtered with definition queries are much quicker to flick on and off. Another handy feature of this technique is that multipatch models sort themselves into appropriate views and symbology immediately when their Status attribute is updated.
    </p> 
    <p>Layers that have definition query filters applied are named with a <b>DQV</b> suffix so that people don't get confused by omitted records. 
  </div>

    <div class="feature tour">

      <h3>The 3D Scene and its layers</h3> 
      <p>The 3D scene and its table of contents is the hub of the ModelMgt project all of the tools reference layers from the table of contents of this 3D scene. It is also the view upon which all review and edit tasks are carried out. </p>
  
      <figure class="middle">
        <img  src="images/scene_contents.jpg">
        <figcaption>Figure 6: 3D Layers Portrayed in the 3D Scene Pane</figcaption>
      </figure>
    <h3>3D Layers</h3>
 
    <ul>
      <li><b>Prior Archived Unfiltered Group Layer:</b> This group layer includes a layer for each of the multipatch layers that were released with the prior archived model collection.   These make up the initial state of the collection before any changes are made.  No definitioan queries apply to these layers. These layers should be considered read-only.  In case this layer needs to be reconstructed, a copy is saved in the PriorArchived folder. 
      
      <li><b>Stage Unfiltered Group Layers:</b> This group layer includes a layer for each of the multipatch layers created for the next edition.  In a brand new ModelMgt workflow folder this may not exist yet.  It can be created by adding the Prior Archived Unflitered layer and changing the source references for each layer.   This group layer should also be saved with the NextEdition geodatabase for the convenience of users who want to add it to other projects.  
        
      <li><b>Prior Archived and Next Edition Layer Demo:</b> Represents the each of the multipatch feature classes in the prior archived edition, but with styling and definition query views that make it easy to review the collection, toggling the demolition candidates fromthe Active_MP feature class with models from Proposed_MP.  Definition query views are identified by including a <b>DQV</b> suffix in their names.  These layers are the basis for Scene Layer packages that would be published to ArcGIS on-line.  
       
     <li><b>Stage Edit Views:</b> Because the staging process involves changing the Status of models, it can be difficult to see what is happening as new models sometimes completely cover existing models.  This situation is made worse by the fact that flicking the Active_MP layer on and off can take minutes.  To streamline the staging and review process, this group of Status-based definition queries and group layers provides a preview of the layers as they would appear inthe final layer previews.  When staging status changes to the layers in this group, models appear to dissappear form one layer and appear on another when the status is changed.  You may want to adjust these based on your own experience and preferences. 

          </ul>
        </div>

<hr>

      <h2 id="tools">Explore Tasks and Tools</h2>
      <figure class="right">
        <img  src="./images/tasks.jpg">
        <figcaption>ArcGIS Tasks provide a high-level ordering of procedures.</figcaption>
      </figure>
      <p>  There are several procedures involved managing your model collection.  The ModelMgt project uses <b>Tasks</b> to break the model management process into a sequence of stages.  The tasks include instructions that guide theuser throughthe stages of initializing the workspace, adding new models, updating attributes, editing models and publishing the next edition.  Most of the tasks are linked to geoprocessing tools that prompt the user for parameters and carry out procedures.    
      <p>
      Click on <b>View > Tasks </b> to explore how the tasks order the steps organized as task groups.  Expand the groups to reveal the individual tasks.  These wil be discussed in detail below. 
      </p><p>
      The technical user should <a href="https://pro.arcgis.com/en/pro-app/latest/help/tasks/whatistask.htm" target="arcdoc"> be familiar with how tasks are put together with geoprocessing tools</a>.  While this new feature of ArcGIS pro does make things a little easier, unexpected issues may crop up that require some trouble-shooting skills.
      
      <h3 style="clear: both">Geoprocessing Tools</h3>
      <p>
      Most of the prepared tasks call on custom-made geoprocessing tools.  To cut down on confusion with 3D models, we are going to call geoprocessing models "tools."  Use <b>View > Catalog </b> Pane to expose the catalog on the right-side of the ArcGIS window.  Expand the toolboxes group and the <b>City3D_ModelMgt.tbx</b> toolbox.  You will notice that the first five tool groups have names that correspond with the task groups.  Expand these and have a look at the various tools. 
      </p>
      <figure class="right">
        <img  src="./images/tools.jpg">
        <figcaption>Model Management Toolbox in Catalog Pane</figcaption>
      </figure>
      <p>
        Notice how the individual tools are named with numbers corresponding to the tool group and letters referring tothe general order that they might be used.  Sticking with this convention makes it easier to find the custom tools when confronted with the huge drop-down list that is used in the Task editor.   
      </p><p>Not all tools are associated with tasks.  SOme of them, such as the ones in the pbcGIS_utils tool group are handy utilities.  The Rumpus tool group contains tools that you might create to preserve one-off procedures that you may want to repeat or re-use. 
      </p>

      <h3>ArcGIS Tasks and Geoprocessing Tools are Self-Documenting</h3>
      <p>
      A very handy aspect of the ArcGIS geoprocessing framework is that custom-built tools automate many steps that can be thoroughly understood by examining the tool in <b>Edit</b> mode.   We carry this further by adding graphic labels to the model itself where clarification and further instruction might be useful. 
      With all of this, the tools can be considered self-documenting.  This alleviates the need for a very detailed discussion of the internals of tools in this documentation.    Right-click on a tool and choose <b>Edit</b> to have a look at the tools.
      </p><p>
      Users should be very familiar with trouble-shooting <a href="https://pro.arcgis.com/en/pro-app/latest/help/analysis/geoprocessing/basics/geoprocessing-quick-tour.htm"target="arcdoc"> ArcGIS Geoprocessing tools</a> and <a href="https://pro.arcgis.com/en/pro-app/latest/help/tasks/whatistask.htm" target="archelp">tasks</a>.  There are many ways that ArcGIS geoprocessing tools can get messed up. This documentation can't cover all of these possibilities.
      </p>
    
      <hr>

</div> <!-- Closes #article div -->

    <div id="footer"> <!-- Content provided by cityschema_includes.js--> </div> 
  </div> <!-- Closes main container--> 
</div> <!-- closes grid container-->
</body>
</html>
    