
<!doctype html>
<html lang="en">
<!-- Hi Folks, this is the template file for pages in the citySchema.org documentation library -->
<head>
    <title>Promoting and Demoting Model Status</title>
    <meta name="description" content="Covers the procedures formanaging a collection of 3D building models as part od a GIS-based city modeling project.  Par of the citySchema.org framework foo developing, sharing and preserving city model assets. ">
    <meta name="keywords" content="City Modeling, Digital Humanities, Geography, citySchema">
    <meta name="author" content="Paul B. Cote">
    
<!-- don't edit between here and the Article div.  -->
    <link rel="icon" href="../resources/images/favicon.png" type="image/x-icon">
    <script src="../resources/jquery/jquery-3.6.0.min.js"></script>
    <link href="../resources/cityschema.css" rel="stylesheet"> 
    <script src="../resources/slideshow_pbc.js"></script>
    <link href="../resources/slideshow_pbc.css" rel="stylesheet"> 

    <!-- The index sidebar and all content other than the main article coe form the cityschema_includes.js.
          When you add a new page or internalachcor, you should update the index in cityschema_includes.js.-->
    <script src="../resources/cityschema_includes.js"></script>
    <!-- THis has to come after the cityschema_includes file-->
    <script src="../resources/cityschema.js"></script>
</head>
<body>
    <div id="grid-container">
      <div id="index-container">
         <div id="index-header"> <!-- Content provided by cityschema_includes.js--> </div>
         <div id="index">        <!-- Content provided by cityschema_includes.js--> </div>
         <div id="index-footer"> <!-- Content provided by cityschema_includes.js--> </div>
      </div> 
      <div id="main-container">
        <div id="header"> <!-- Content provided by cityschema_includes.js--> </div>

<!-- Page content goes inside the article div -->
<div id="article">
  <h3 class="section_title"></h3>  <!-- Optional: would be the tile of the intro chapter. -->
    <h1 class="title">Promoting and Demoting Model Status</h1>


      <h2 id="stage">Updating Status Attributes of Existing Models </h2>
      <p>Importing new models is one aspect of updating the model collection.  Next, we will visit each new model to see how existing models may be affected by these new additions. For example, new models may land on top of old models that may need their Status demoted to some phase of demolition. Sometimes existing models need to be modified to clear the site for a new model.
      </p><p>
      The update process also involves looking for models in <b>Stage_Proposed_MP</b> and <b>Stage_Internal_MP</b> that may have been promoted through the approval,permitting or construction process since the last update.  This search may be facilitated by joining these feature classes with the <b>Development Log</b>.   
      </p><p>
      As we look at each of these models, we can refer to current aerial photography to see what we can see.  When changes to status are warranted, we should be ready to update any of the <b>Model Status Attributes</b> as follows: 
      <ul>
        <li><b>Status</b>, 
          <li><b>Appear Date</b>, 
          <li><b>Disappear Date</b>, 
          <li><b>Appear Source</b> and 
          <li><b>Disappear Source</b>
          </ul>  
        <p>It is crucial at this stage that you have made yourself familiar with the <a href="../model_collection/index.htm#datadictionary">Model Attribute Dictionary</a>.  Keep it handy so that you understand how to fill in these fields which are crucial to the integrity of the 3D models collection!
        </p>

      <div class="feature funfact">
      <h3>Model Collection Stewardship is Research</h3>
      <p>There are several aspects of managing the model collection that can be thought of as historical research. This is a useful mind-set for understanding the right sorts of values for the <b>Model Status</b> and <b>Model Provenance</b> attributes.  In the setting of a typical municipal GIS or urban planning department the focus isnormally on information related to present and future situations.  Care has been taken in the design of the model collection schema and management workflows to streamline the update tasks so that preservation of historical information is a side-product that leaves a priceless historical record as a side-effect of collection updates.  While this benefit does not require much additional work,it does require an understanding of the proper assignment of model status attribute values.  
      </p><p>
      The model collection schema is built to support research.  The process of updating the model to reflect current conditions requires the consultation of reference materials such as aerial photos or the development log, permitting and assessing records, etc.  The automated attribute assignment procedure, described above streamlined access to reference resources such as the latest Google Maps or NearMap and Assessing department viewers. The Appear Date, Disappear Date Appear Source and Disappear Source attributes provide a place to record the source documents that confirm these observations.   Proper attribution of this kind is a big time-saver practically speaking.  Reference material must be checked. It is easy to fill in these attributes when the references are at hand.  Recording the facts in the catalog means that the references wil not have to be checked again. 
      </p><p>
      The same model collection schema is useful for pure historical research and development of models of past street-scapes that do not exist anymore.  Over most of the city, we may not have the knowledge and date-integrity to be able to zoom back in time with a time-slider.  One difficulty is that we do not know the true <b>Appear Date</b> for most of the models. Nor do we have models of past structures dating to earlier than 2003.  Nevertheless, the model collection schema would allow an interested person to add historical models and to data to annotate the appear and disappear dates for structures using historical maps.   
      </p>
      <p>Keep in mind that Appear and Disappear dates do not necessarily reflect "year built" or "year demolished". Rather, these attributes reflect the sources that record the date that the structure is first confirmed to exist or to have gone missing. Recording this reference information when you have it eliminates the need to check sources again until a better source of information becomes available.  
      </div>


      <div class="feature funfact">
        <h3>Update Attributes with the Attributes Pane</h3>
        <p>Most of the tasks involved with updating the model collection involve selecting one or more features from the 3D view and changing their attributes.  The <a href="https://pro.arcgis.com/en/pro-app/latest/help/editing/edit-feature-attributes.htm" target="arcdocs"> Attributes Pane </a> is the right tool for this job. This method is easier and safer than trying to edit attributes from the table or with the Calculate Values tool.    
        </div> 
   
   
 

      <h3>Understanding the Stage Edit Views and the Status Routing Process</h3>
      <p>As described in more detail in the <a href="../model_collection/index.htm" target="outboard">The Building Model Collection</a>, the geodatabase view of the model collection is segmented into feature classes according to <b>Model Status</b> This segmentation by status streamlines applications that are focused on the current or near-future views of the model collection.   
      </p><p>
      The segmentation of the collection according to Model Status is useful but requires a little trickery in the development of new editions, since updating the status of a model can cause the model to jump from one feature class to another.  
      Experience has shown that trying to accomplish changes of this kind by copy/pasting multipatch models from one feature class to another is a recipe for disaster -- some of which may not come to light until weeks or months later, whereupon, one has a sickening feeling of wondering how many other models may have failed to copy or paste properly. 
      </p><p>
      The way we avoid this problem is by setting up the Stage feature classes so that any attribute edits including status changes may be made in the Stage feature classes, where they may be reviewed and made logically consistent.  Deletions of models from the collection are flagged by setting the <b>Model Status</b>  to <b>Retired</b> or to <b>Expunge</b>. When the next edition is published, the models in the Stage feature classes are routed to their new feature classes using the <b>StatusRouter</b> tool, which is discussed in more detail below.
      </p>
      <p>
      
      <div class="feature tour">
        <h3>The Stage Edit Views</h3>
        <figure class="right">
          <img  src="./images/stage_edit_views.jpg">
          <figcaption>The Stage Edit Views Permit the Quick Toggling of Features according to their new Status values.</figcaption>
        </figure>
        <p>The process of updating the status of models can be confusing, since it is often the case that new models completely cover previous models.  It is helpful to be able to turn classes of models on and off according to their new status values.  This can be troublesome, because the Active_MP layer with its 140,000 models takes a long time to draw.  Many hours of trying to work around these awkward problems has led to the development of a set of <a href="https://pro.arcgis.com/en/pro-app/latest/help/mapping/layer-properties/definition-query.htm" target="arcdoc">Definition Query Views</a> that sort the features in the Stage feature classes into previews of the final sorted feature classes.   The neat thing about this is that picking a new status for a model causes the model to immediately disappear from one definition query view and appear in another with the appropriate symbology.  This allows a very convenient way of checking the logical consistency of the collection as we are updating it. 
        </p>

      <h3>Explore the Stage Edit Views</h3>
      <p>The illustration to the right shows how the stage edit views use group layers and definition query views to sort the Stage feature classes into group layers that simulate the final status layers.  
      <p>The <b>Stage_Active_MP</b> feature class is further broken down into the <b>Stable</b> features (those that continue to have a status of Current) and <b>Demolition Candidates</b> those that have a status that is some variation of <b>Demolished</b> It is handy to be able to toggle the demo candidates with the models in the <b>Proposed Preview</b> group layer while checking to make sure that your updates are logically consistent. 
      <p>Working with these layers while making updates takes some practice. You may decide to modify these definition queries once you have fooled around with these.  
      </div>

      <div class="feature funfact">
<h3>Regenerating or Modifying the Stage Edit Layers</h3>
<p> It is inevitable that you will lose or want to modify or recover one or more Stage Edit Views.  The masters of the current working version of the entire group layer is stored in the <b>ArcDocs/Layers</b> folder in the current Model Management workspace. If you make changes to yours, be sure to save the group layer there!    
</p><p>
  It took a while for me to figure out that it is very important to uncheck the the option <b>Remove layers that have been overwritten by geoprocessing tools</b> in the ArcGIS Pro <b>Project > Geoprocessing</b> Options.  Otherwise these layers keep disappearing!  
</p> 
<h3>Odd behavior of Sticky Definition Querys</h3>
<p>At ArcGIS Pro 2.9 we have a problem of queries that seem to be edited but then revert back totheir old values once you save them.  I have found that it is sometimes helpful to:
  <ol>
    <li>Change the query
    <li>Then click the green checkmark above the query window.
    <li>Look at the values againtomake sure that they reflect your changes.
    <li>If not, remove the query and build a new one from scratch.
  </ol>
</div>
     
      <div class="feature funfact">
     <h3>Never Delete Models from the Stage Feature Classes</h3>
     <p>The principle of reversibility for all edits made in this model collection management workflow requires that models not be deleted from any of the Stage feature classes.  To prevent a model from making it to the next edition, you can set its status to <b>Retired</b> which is the normal procedure.  Or for models that are exact duplicates or corrupted, you can set the status to <b>Expunge</b>, which will cause the model to be ignored by the <b>Status Router</b> tool when the next edition is produced.   
     </p><p>
      The exception to this rule is that you are allowed to delete models from the <b>NewModels_MP</b> feature class. 
     </div>
       

<h2>OK!  Lets GetStarted!</h2>
<p>Enough chitchat.  Lets continue updating the collection!</p>

     <h3>Visit Each New Model</h3>
     <p>Assuming that you have imported some new models, and appended them to the <b>Stage_NewModels_MP</b> feature class, a usefulway of structuring the task of integrating these is to zoom to each one.  A handy way of doing this is to open the attribute table of unfiltered NewModels feature class, sort it according to its Object_ID, then zoom to each model.  While you are looking at it in the 3D Scene, you can check sources like aerial photography (links provided in the model attributes.)  This will confirm the model status and the demolition status of the other buildings in its context. Some of these extant models may require edits to make them logically consistent with the new models. 

 
      <h3>Check Proposed Models for Construction / Demolition Activity</h3>

        Notice that Proposed models that have changed their status to <b>Under Construction</b>     
        
        We can now begin the process of checking and updating the values of model status attributes for these models.  To begin with, it is important to have a clear understanding of the purpose for each of the attributes.  So please review the <a href="../model_collection/index.htm#datadictionary">Model Collection Data Dictionary</a>.  
      </p>
      <h3>Overview</h3>
      <ol>
        <li>Visit each of the new models.  If you have had more than one batch, it can be helpful to sort the NewModels feature class according to the Record Initialization Date (RecInitDt).
        <li>Use your most current reference image, which could be Google Maps, Google Earth or NearMap to see what has been happening in the context of the new model. 
        <li>Update the Model Status attributes to reflect the status of the new model and other models that may be affected by the new project.  While you have the reference material in front of you, update the values Appear Date, Appear Source and Disappear Date and Disappear Source.  For example, 
            <ul>
              <li>For new models that have a status of Approved or Permitted, the Appear Date can reflect the date of the project approval or permission as reflected in the development log. The Appear source should be the development log with its issue date. 
              <li>For existing models that would be affected by approved or permitted  projects, change their status to <b>Approved Demo</b> or <b>Permitted Demo</b>. 
              <p>While you have the most current photography at hand, it is useful to use the <b>Disappear Source</b> attribute to record your observation of whether there is any site work going on, or of the existing structures remain unchanged.   
              <li>It is often the case that models affected by new development may have to be modified since the new project may call for the removal of parts of existing models while leaving other parts intact.  These models should have their <B>QA Flag</b> set to <b>3D Edit Candidate</b>.  These will be dealt with later. 
              <li>If a new model is a new project proposal that supersedes an existing proposal on the same site, the older model may have its status changed to <b>Superseded Proposal</b> and the <b>Disappear Date</b> should be the same as the appear date for the new proposal. 
              </uL>
      <li>Notice that when models in the Active feature class have their Model Status values changed to <b>Demolished</b>, <b>Modified</b>, these models disappear from the <b>Stage Active Preview</b> group layer to one of the definition query views in the <b>History Preview</b> group layer. This allows you to quickly toggle these alternate views to expose any small models that may otherwise be hidden under other models.    
      </ol>
     <div class="feature procedure">
       <h3>Time-Series Imagery in Google Earth</h3>
       <p>Google Earth is a free tool that includes a deep store of recent and historical aerial imagery. The historical imagery can be viewed by clicking the button shown at number 2 in the image below.</p>
        <figure class="middle"> 
          <img  src="images/google_earth.jpg"> 
          <figcaption>Google Earth is a great free research tool.</figcaption>
        </figure>
      <p>You can quickly zoom to a site in Google Earth by copy-pasting the latitude and longitude from the model's attributes into the Google Earth search box as shown at number 1 in the figure, above.  
     </div>

     <h3>Promote Status of Proposed Models</h3>
      <p>Reviewing all of the new models and their context will have led to many changes in other feature classes.  There may be other changes needed to reflect the advancement of projects through the design review process.  These changes can be found by looking at models in the <b>Stage_Proposed_MP</b> and <b>Stage_Internal_MP</b> feature classes and comparing the value of <b>Status</b> in these feature classes with the <b>Project Status</b> attribute in the Development Log.  To facilitate this, it may be helpfulto join these feature classes with the current Development Log using the <b>Project ID</b>. Select by attribute queries or new definition query views can be created to highlight models that are candidates for promotion or demotion.  These change candidates should be checked one-by one.  With reference to the most current aerials.  Then the same update procedure as described above, can be carried out. 
      </p>
      <p>
        Remember that the values of <B>Appear Date</b>, <b>Appear Source</b>, <b>Disapp_Dt</b> and <b>Disapp_Src</b> attributes should also be updated to reflect the change in status while you have all of the source material at hand. 
        </p>

     <h3>Don't forget to update the edit fields!</h3>
     <p>As described in the data dictionary, the Record Modification fields are updated automatically by ArcGIS.  These are very useful for traching and sorting recent modifications.  For better or worse, there is no way to stop these fields from being re-set when the model collection is migrated to the next edition.  Yet, it is important for users and managers tobe able to understand the changes that have been made to the models and their attributes.  Therefore, it is up to you to set the values for <b>Editor</b>, <b>Edit Date</b> and <b>Edit Action</b>.  
     </p><p>
      Most of the <b>Edit Actions</b> that happen to the stage feature classes during the staging process can be described as "Updated Status Attributes". The <b>Update Edit Fields</b> task facilitates updating the Edit fields by looking for records in each of the Stage feature classes (except for Stage_NewModels_MP) that have a Record Modify date later than both the Recode Init Date and the Edit Date. These are records that have been modified during at somepoint inthe lifespan of the ModelMgt workspace, but that have not yet had their edit fields updated.  These records have a new Edit Date assigned and the value of Edit User is set to be the same as the Record Modified user.  
     </p><p>
       It would be cool to be able to preserve the original Record Modified date, but unfortunately ArcGis updates the modification date before doing the modification.  
       
<hr>

      <h1 id="edit">Model Edit Flagging and Workflows</h1>

      <p>In the course of your adventures trying to fit new models into their urban context you wil have come across various situations where models need to be edited or created.  Normally these situations are flagged for attention later.  There are four model editing scenarios that eachhave their own workflows soitmakes sense to accumulate this work and handle edits when you can shift intoa different mode. 
      </p><p>
      Here are the edit workflows and how to flag them:
      </p>
      <ul>
        <li><b>New Model:</b> Flag in <b>Issue Points</b> feature class. 
          <ul>
            <li>Create in external editor, handle with model import workflow. 
            <li>ArcGIS Model Creation Workflow.
          </ul>
        <li><b>Model 3D Edit:</b> Flag with <b>QA Flag</b> = <b>3D Edit</b>
          <ul>
            <li>Modify in in external editor, handle with model import workflow. 
            <li>ArcGIS model editing workflow. 
          </ul>
        <li><b>Surface Edits:</b>
          <ul>
          <li><b>Remove Materials (Textures or Colors):</b>   <b>QA Flag</b> = <b>Remove Color</b>
            <ul> <li>Use surface edit workflow</ul>
          <li><b>Flip Surface Normals (all faces):</b> <b>QA Flag</b> = <b>Flip Faces</b>
            <ul> <li>Use surface edit workflow</ul>
          <li><b>Flip Surface Normals (subset of faces):</b> Flag with <b>QA Flag</b> = <b>3D Edit</b>
              <ul> <li>Must be edited with external editor and imported with model import workflow. .</ul>
          </ul>
        </ul>
        
      <h3>Setting Status for Edited Models</h3>
      <p>When models are flagged for editing, there are two options for dealing with the status of the prior version of the model.  
      </p><p>
        In the case of 3D model edits, if a model is being split to reflect a demolition of part of the real world structure, then the status for the prior model should be set to<b>Modified</b> so that the original model of the prior condition will be routed to the <b>History_MP</b> feature class. See the note on <a href="#modified">How the <b>Modified</b> Model Status Saves You Time</a>.
      </p><p>
        If a model is flagged for 3d Edits for a repair, or if themodel splitting operation is going to produce complete models of the persistent part of the structure as well as a model of the portion of the structure that will be removed, then the status of the prior model should be set to <b>Retired</b> 
      </p><p>
        In the case of surface edits when the new model is geometrically identical with the prior version, the status of the prior model would be set to <b>Expunge</b>.
      </p>   
    <hr>

</div> <!-- Closes #article div -->

    <div id="footer"> <!-- Content provided by cityschema_includes.js--> </div> 
  </div> <!-- Closes main container--> 
</div> <!-- closes grid container-->
</body>
</html>
    